name: Build and publish docker image for webapps
description: Builds and published docker images for all web-apps for ST network.
inputs:
  webapp_name:
    description: 'webapp DOCKER IMAGE to build'
    default: ''
    required: true
  webapp_branch:
    description: 'webapp branch to builddocker image'
    default: ''
    required: true
  network_url:
    description: 'SR network url for web-apps to point to, example: dev-1.devnet-0chain.net'
    default: ''
    required: true
  runner_number:
    description: 'runner number'
    default: ''
    required: false
  svc_account_user:
    description: 'secrets used to clone repository'
    default: ''
    required: true
  svc_account_secret:
    description: 'secrets used to clone repository'
    default: ''
    required: true
  docker_username:
    description: 'secrets.DOCKERHUB_USERNAME'
    default: ''
    required: true
  docker_password:
    description: 'secrets.DOCKERHUB_PASSWORD'
    default: ''
    required: true
  webapp_registry:
    description: 'docker registry for web-app to be published to'
    default: ''
    required: true
  custom_go_sdk_version:
    required: false
    default: "staging"
    description: 'custom gosdk version. Will need to generate wasm binary'

  FBASE_API_KEY:
    description: 'env variable for webapp'
    default: ''
    required: true
  FBASE_AUTH_DOMAIN:
    description: 'env variable for webapp'
    default: ''
    required: true
  FBASE_DB_URL:
    description: 'env variable for webapp'
    default: ''
    required: true
  FBASE_PROJECT_ID:
    description: 'env variable for webapp'
    default: ''
    required: true
  FBASE_STORAGE_BUCKET:
    description: 'env variable for webapp'
    default: ''
    required: true
  FBASE_MESSAGING_SENDER_ID:
    description: 'env variable for webapp'
    default: ''
    required: true
  FBASE_APP_ID:
    description: 'env variable for webapp'
    default: ''
    required: true
  FBASE_SHARE_LINK:
    description: 'env variable for webapp'
    default: ''
    required: true
  WEBHOOK_API_TOKEN:
    description: 'env variable for webapp'
    default: ''
    required: true
  TRANSLATION_API_KEY:
    description: 'env variable for webapp'
    default: ''
    required: true
  ZENDESK_KEY:
    description: 'env variable for webapp'
    default: ''
    required: true
  # DOMAIN:
  #   description: 'env variable for webapp'
  #   default: ''
  #   required: true
  ZBOX_APP:
    description: 'env variable for webapp'
    default: ''
    required: true
  BE_URL:
    description: 'env variable for webapp'
    default: ''
    required: true
  JWT_ENABLED:
    description: 'env variable for webapp'
    default: ''
    required: true
  ATLUS_URL:
    description: 'env variable for webapp'
    default: ''
    required: true
  NEXT_PUBLIC_MONDAY_FORM:
    description: 'env variable for webapp'
    default: ''
    required: true
  DEFAULT_THEME:
    description: 'env variable for webapp'
    default: ''
    required: true
  NODE_ENV:
    description: 'env variable for webapp'
    default: ''
    required: true
  APP_ENV:
    description: 'env variable for webapp'
    default: ''
    required: true
  NFT_CHAIN_ID:
    description: 'env variable for webapp'
    default: ''
    required: true
  ETH_CHAIN_ID:
    description: 'env variable for webapp'
    default: ''
    required: true
  ZCN_TOKEN:
    description: 'env variable for webapp'
    default: ''
    required: true
  MOCK_ZCN_TOKEN:
    description: 'env variable for webapp'
    default: ''
    required: true
  ETH_TOKEN:
    description: 'env variable for webapp'
    default: ''
    required: true
  BANCOR_NETWORK:
    description: 'env variable for webapp'
    default: ''
    required: true
  UNISWAP_V2_SWAP_ADDRESS:
    description: 'env variable for webapp'
    default: ''
    required: true
  BRIDGE:
    description: 'env variable for webapp'
    default: ''
    required: true
  REVERSE_BRIDGE:
    description: 'env variable for webapp'
    default: ''
    required: true
  AUTHORIZER_ADDRESS:
    description: 'env variable for webapp'
    default: ''
    required: true
  BANCOR_TOKEN_ADDRESS:
    description: 'env variable for webapp'
    default: ''
    required: true
  USDC_TOKEN_ADDRESS:
    description: 'env variable for webapp'
    default: ''
    required: true
  EURC_TOKEN_ADDRESS:
    description: 'env variable for webapp'
    default: ''
    required: true
  ALCHEMY_API_KEY:
    description: 'env variable for webapp'
    default: ''
    required: true
  ETH_NODE_URL:
    description: 'env variable for webapp'
    default: ''
    required: true
  NFT_NODE_URL:
    description: 'env variable for webapp'
    default: ''
    required: true
  NFT_FACTORY_ADDRESS:
    description: 'env variable for webapp'
    default: ''
    required: true
  NFT_FACTORY_MODULE_ERC_721_ADDRESS:
    description: 'env variable for webapp'
    default: ''
    required: true
  NFT_FACTORY_MODULE_ERC_721_FIXED_ADDRESS:
    description: 'env variable for webapp'
    default: ''
    required: true
  NFT_FACTORY_MODULE_ERC_721_PACK_ADDRESS:
    description: 'env variable for webapp'
    default: ''
    required: true
  NFT_FACTORY_MODULE_ERC_721_RANDOM_ADDRESS:
    description: 'env variable for webapp'
    default: ''
    required: true
  MUMBAI_TESTNET_NETWORK_ID:
    description: 'env variable for webapp'
    default: ''
    required: true
  POLYGON_MAINNET_NETWORK_ID:
    description: 'env variable for webapp'
    default: ''
    required: true
  MUMBAI_TESTNET_CHAIN_ID:
    description: 'env variable for webapp'
    default: ''
    required: true
  POLYGON_MAINNET_CHAIN_ID:
    description: 'env variable for webapp'
    default: ''
    required: true
  ETHEREUM_CHAIN_ID:
    description: 'env variable for webapp'
    default: ''
    required: true
  BLOCK_EXPLORER_URL:
    description: 'env variable for webapp'
    default: ''
    required: true


runs:
  using: "composite"
  steps:
    - name: Cloning web-apps Repository.
      run: |
        git clone https://${{ inputs.svc_account_user }}:${{ inputs.svc_account_secret }}@github.com/0chain/web-apps.git
        echo "Successfully cloned the web-apps repository"

    - name: "Clone gosdk Repo"
      run: |
        git clone https://github.com/0chain/gosdk.git
        cd gosdk
        git branch -r | grep -v '\->' | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" | while read remote; do git branch --track "${remote#origin/}" "$remote"; done || true
        BRANCH="${{ inputs.custom_go_sdk_version }}"
        if [[ $BRANCH == "" ]]; then
          echo "Checking for latest sprint branch"
          git branch --sort=-committerdate | grep "sprint-*" | head -1
          BRANCH=$(git branch --sort=-committerdate | grep "sprint-*" | head -1)
          echo ::set-output name=BRANCH::${BRANCH}
        fi
        echo "Branch name is ${BRANCH}"
        git checkout ${BRANCH}

    - name: "build wasm-sdk"
      run: |
        cd gosdk
        docker run --rm -v $PWD:/gosdk -w /gosdk golang:1.21.5 sh -c "git config --global --add safe.directory /gosdk; make wasm-build"

    - name: Set Docker Image Tags.
      shell: 'script --return --quiet --command "bash {0}"'
      id: get_info
      run: |
        cd web-apps
        echo "SHORT_SHA=$(git rev-parse --short=8 HEAD)" >> $GITHUB_ENV
        if [[ "${{github.ref}}" == refs/pull/* ]]; then
          tag=${GITHUB_REF/\/merge/}
          echo "TAG=$(echo pr-${tag:10})" >> $GITHUB_ENV
        else
          echo "TAG=$(echo ${GITHUB_REF#refs/*/} | sed 's/\//-/g')" >> $GITHUB_ENV
        fi

    - name: Login To Docker Repository.
      uses: docker/login-action@v2
      with:
        username: ${{ inputs.dockerhub_username }}
        password: ${{ inputs.dockerhub_password }}

    - name: Setting Up Environment Variables.
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        cd web-apps
        touch .env
        echo "FBASE_API_KEY=${{ inputs.FBASE_API_KEY }}" > .env
        echo "FBASE_AUTH_DOMAIN=${{ inputs.FBASE_AUTH_DOMAIN }}" >> .env
        echo "FBASE_DB_URL=${{ inputs.FBASE_DB_URL }}" >> .env
        echo "FBASE_PROJECT_ID=${{ inputs.FBASE_PROJECT_ID }}" >> .env
        echo "FBASE_STORAGE_BUCKET=${{ inputs.FBASE_STORAGE_BUCKET }}" >> .env
        echo "FBASE_MESSAGING_SENDER_ID=${{ inputs.FBASE_MESSAGING_SENDER_ID }}" >> .env
        echo "FBASE_APP_ID=${{ inputs.FBASE_APP_ID }}" >> .env
        echo "FBASE_SHARE_LINK=${{ inputs.FBASE_SHARE_LINK }}" >> .env
        echo "WEBHOOK_API_TOKEN=${{ inputs.WEBHOOK_API_TOKEN }}" >> .env
        echo "TRANSLATION_API_KEY=${{ inputs.TRANSLATION_API_KEY }}" >> .env
        echo "ZENDESK_KEY=${{ inputs.ZENDESK_KEY }}" >> .env
        echo "DOMAIN=${{ inputs.network_url }}" >> .env
        echo "ZBOX_APP=${{ inputs.ZBOX_APP }}" >> .env
        echo "BE_URL=${{ inputs.BE_URL }}" >> .env
        echo "JWT_ENABLED=${{ inputs.JWT_ENABLED }}" >> .env
        echo "ATLUS_URL=${{ inputs.ATLUS_URL }}" >> .env
        echo "NEXT_PUBLIC_MONDAY_FORM=${{ inputs.NEXT_PUBLIC_MONDAY_FORM }}" >> .env
        echo "DEFAULT_THEME=${{ inputs.DEFAULT_THEME }}" >> .env
        echo "NODE_ENV=${{ inputs.NODE_ENV }}" >> .env
        echo "APP_ENV=${{ inputs.APP_ENV }}" >> .env
        echo "NFT_CHAIN_ID=${{ inputs.NFT_CHAIN_ID }}" >> .env
        echo "ETH_CHAIN_ID=${{ inputs.ETH_CHAIN_ID }}" >> .env
        echo "ZCN_TOKEN=${{ inputs.ZCN_TOKEN }}" >> .env
        echo "MOCK_ZCN_TOKEN=${{ inputs.MOCK_ZCN_TOKEN }}" >> .env
        echo "ETH_TOKEN=${{ inputs.ETH_TOKEN }}" >> .env
        echo "BANCOR_NETWORK=${{ inputs.BANCOR_NETWORK }}" >> .env
        echo "UNISWAP_V2_SWAP_ADDRESS=${{ inputs.UNISWAP_V2_SWAP_ADDRESS }}" >> .env
        echo "BRIDGE=${{ inputs.BRIDGE }}" >> .env
        echo "REVERSE_BRIDGE=${{ inputs.REVERSE_BRIDGE }}" >> .env
        echo "AUTHORIZER_ADDRESS=${{ inputs.AUTHORIZER_ADDRESS }}" >> .env
        echo "BANCOR_TOKEN_ADDRESS=${{ inputs.BANCOR_TOKEN_ADDRESS }}" >> .env
        echo "USDC_TOKEN_ADDRESS=${{ inputs.USDC_TOKEN_ADDRESS }}" >> .env
        echo "EURC_TOKEN_ADDRESS=${{ inputs.EURC_TOKEN_ADDRESS }}" >> .env
        echo "ALCHEMY_API_KEY=${{ inputs.ALCHEMY_API_KEY }}" >> .env
        echo "ETH_NODE_URL=${{ inputs.ETH_NODE_URL }}" >> .env
        echo "NFT_NODE_URL=${{ inputs.NFT_NODE_URL }}" >> .env
        echo "NFT_FACTORY_ADDRESS=${{ inputs.NFT_FACTORY_ADDRESS }}" >> .env
        echo "NFT_FACTORY_MODULE_ERC_721_ADDRESS=${{ inputs.NFT_FACTORY_MODULE_ERC_721_ADDRESS }}" >> .env
        echo "NFT_FACTORY_MODULE_ERC_721_FIXED_ADDRESS=${{ inputs.NFT_FACTORY_MODULE_ERC_721_FIXED_ADDRESS }}" >> .env
        echo "NFT_FACTORY_MODULE_ERC_721_PACK_ADDRESS=${{ inputs.NFT_FACTORY_MODULE_ERC_721_PACK_ADDRESS }}" >> .env
        echo "NFT_FACTORY_MODULE_ERC_721_RANDOM_ADDRESS=${{ inputs.NFT_FACTORY_MODULE_ERC_721_RANDOM_ADDRESS }}" >> .env
        echo "MUMBAI_TESTNET_NETWORK_ID=${{ inputs.MUMBAI_TESTNET_NETWORK_ID }}" >> .env
        echo "POLYGON_MAINNET_NETWORK_ID=${{ inputs.POLYGON_MAINNET_NETWORK_ID }}" >> .env
        echo "MUMBAI_TESTNET_CHAIN_ID=${{ inputs.MUMBAI_TESTNET_CHAIN_ID }}" >> .env
        echo "POLYGON_MAINNET_CHAIN_ID=${{ inputs.POLYGON_MAINNET_CHAIN_ID }}" >> .env
        echo "ETHEREUM_CHAIN_ID=${{ inputs.ETHEREUM_CHAIN_ID }}" >> .env
        echo "BLOCK_EXPLORER_URL=${{ inputs.BLOCK_EXPLORER_URL }}" >> .env

        cd packages/${{ inputs.webapp_name }}
        touch .env
        echo "FBASE_API_KEY=${{ inputs.FBASE_API_KEY }}" > .env
        echo "FBASE_AUTH_DOMAIN=${{ inputs.FBASE_AUTH_DOMAIN }}" >> .env
        echo "FBASE_DB_URL=${{ inputs.FBASE_DB_URL }}" >> .env
        echo "FBASE_PROJECT_ID=${{ inputs.FBASE_PROJECT_ID }}" >> .env
        echo "FBASE_STORAGE_BUCKET=${{ inputs.FBASE_STORAGE_BUCKET }}" >> .env
        echo "FBASE_MESSAGING_SENDER_ID=${{ inputs.FBASE_MESSAGING_SENDER_ID }}" >> .env
        echo "FBASE_APP_ID=${{ inputs.FBASE_APP_ID }}" >> .env
        echo "FBASE_SHARE_LINK=${{ inputs.FBASE_SHARE_LINK }}" >> .env
        echo "WEBHOOK_API_TOKEN=${{ inputs.WEBHOOK_API_TOKEN }}" >> .env
        echo "TRANSLATION_API_KEY=${{ inputs.TRANSLATION_API_KEY }}" >> .env
        echo "ZENDESK_KEY=${{ inputs.ZENDESK_KEY }}" >> .env
        echo "DOMAIN=${{ inputs.network_url }}" >> .env
        echo "ZBOX_APP=${{ inputs.ZBOX_APP }}" >> .env
        echo "BE_URL=${{ inputs.BE_URL }}" >> .env
        echo "JWT_ENABLED=${{ inputs.JWT_ENABLED }}" >> .env
        echo "ATLUS_URL=${{ inputs.ATLUS_URL }}" >> .env
        echo "NEXT_PUBLIC_MONDAY_FORM=${{ inputs.NEXT_PUBLIC_MONDAY_FORM }}" >> .env
        echo "DEFAULT_THEME=${{ inputs.DEFAULT_THEME }}" >> .env
        echo "NODE_ENV=${{ inputs.NODE_ENV }}" >> .env
        echo "APP_ENV=${{ inputs.APP_ENV }}" >> .env
        echo "NFT_CHAIN_ID=${{ inputs.NFT_CHAIN_ID }}" >> .env
        echo "ETH_CHAIN_ID=${{ inputs.ETH_CHAIN_ID }}" >> .env
        echo "ZCN_TOKEN=${{ inputs.ZCN_TOKEN }}" >> .env
        echo "MOCK_ZCN_TOKEN=${{ inputs.MOCK_ZCN_TOKEN }}" >> .env
        echo "ETH_TOKEN=${{ inputs.ETH_TOKEN }}" >> .env
        echo "BANCOR_NETWORK=${{ inputs.BANCOR_NETWORK }}" >> .env
        echo "UNISWAP_V2_SWAP_ADDRESS=${{ inputs.UNISWAP_V2_SWAP_ADDRESS }}" >> .env
        echo "BRIDGE=${{ inputs.BRIDGE }}" >> .env
        echo "REVERSE_BRIDGE=${{ inputs.REVERSE_BRIDGE }}" >> .env
        echo "AUTHORIZER_ADDRESS=${{ inputs.AUTHORIZER_ADDRESS }}" >> .env
        echo "BANCOR_TOKEN_ADDRESS=${{ inputs.BANCOR_TOKEN_ADDRESS }}" >> .env
        echo "USDC_TOKEN_ADDRESS=${{ inputs.USDC_TOKEN_ADDRESS }}" >> .env
        echo "EURC_TOKEN_ADDRESS=${{ inputs.EURC_TOKEN_ADDRESS }}" >> .env
        echo "ALCHEMY_API_KEY=${{ inputs.ALCHEMY_API_KEY }}" >> .env
        echo "ETH_NODE_URL=${{ inputs.ETH_NODE_URL }}" >> .env
        echo "NFT_NODE_URL=${{ inputs.NFT_NODE_URL }}" >> .env
        echo "NFT_FACTORY_ADDRESS=${{ inputs.NFT_FACTORY_ADDRESS }}" >> .env
        echo "NFT_FACTORY_MODULE_ERC_721_ADDRESS=${{ inputs.NFT_FACTORY_MODULE_ERC_721_ADDRESS }}" >> .env
        echo "NFT_FACTORY_MODULE_ERC_721_FIXED_ADDRESS=${{ inputs.NFT_FACTORY_MODULE_ERC_721_FIXED_ADDRESS }}" >> .env
        echo "NFT_FACTORY_MODULE_ERC_721_PACK_ADDRESS=${{ inputs.NFT_FACTORY_MODULE_ERC_721_PACK_ADDRESS }}" >> .env
        echo "NFT_FACTORY_MODULE_ERC_721_RANDOM_ADDRESS=${{ inputs.NFT_FACTORY_MODULE_ERC_721_RANDOM_ADDRESS }}" >> .env
        echo "MUMBAI_TESTNET_NETWORK_ID=${{ inputs.MUMBAI_TESTNET_NETWORK_ID }}" >> .env
        echo "POLYGON_MAINNET_NETWORK_ID=${{ inputs.POLYGON_MAINNET_NETWORK_ID }}" >> .env
        echo "MUMBAI_TESTNET_CHAIN_ID=${{ inputs.MUMBAI_TESTNET_CHAIN_ID }}" >> .env
        echo "POLYGON_MAINNET_CHAIN_ID=${{ inputs.POLYGON_MAINNET_CHAIN_ID }}" >> .env
        echo "ETHEREUM_CHAIN_ID=${{ inputs.ETHEREUM_CHAIN_ID }}" >> .env
        echo "BLOCK_EXPLORER_URL=${{ inputs.BLOCK_EXPLORER_URL }}" >> .env

        cd ../shared
        touch .env
        echo "FBASE_API_KEY=${{ inputs.FBASE_API_KEY }}" > .env
        echo "FBASE_AUTH_DOMAIN=${{ inputs.FBASE_AUTH_DOMAIN }}" >> .env
        echo "FBASE_DB_URL=${{ inputs.FBASE_DB_URL }}" >> .env
        echo "FBASE_PROJECT_ID=${{ inputs.FBASE_PROJECT_ID }}" >> .env
        echo "FBASE_STORAGE_BUCKET=${{ inputs.FBASE_STORAGE_BUCKET }}" >> .env
        echo "FBASE_MESSAGING_SENDER_ID=${{ inputs.FBASE_MESSAGING_SENDER_ID }}" >> .env
        echo "FBASE_APP_ID=${{ inputs.FBASE_APP_ID }}" >> .env
        echo "FBASE_SHARE_LINK=${{ inputs.FBASE_SHARE_LINK }}" >> .env
        echo "WEBHOOK_API_TOKEN=${{ inputs.WEBHOOK_API_TOKEN }}" >> .env
        echo "TRANSLATION_API_KEY=${{ inputs.TRANSLATION_API_KEY }}" >> .env
        echo "ZENDESK_KEY=${{ inputs.ZENDESK_KEY }}" >> .env
        echo "DOMAIN=${{ inputs.network_url }}" >> .env
        echo "ZBOX_APP=${{ inputs.ZBOX_APP }}" >> .env
        echo "BE_URL=${{ inputs.BE_URL }}" >> .env
        echo "JWT_ENABLED=${{ inputs.JWT_ENABLED }}" >> .env
        echo "ATLUS_URL=${{ inputs.ATLUS_URL }}" >> .env
        echo "NEXT_PUBLIC_MONDAY_FORM=${{ inputs.NEXT_PUBLIC_MONDAY_FORM }}" >> .env
        echo "DEFAULT_THEME=${{ inputs.DEFAULT_THEME }}" >> .env
        echo "NODE_ENV=${{ inputs.NODE_ENV }}" >> .env
        echo "APP_ENV=${{ inputs.APP_ENV }}" >> .env
        echo "NFT_CHAIN_ID=${{ inputs.NFT_CHAIN_ID }}" >> .env
        echo "ETH_CHAIN_ID=${{ inputs.ETH_CHAIN_ID }}" >> .env
        echo "ZCN_TOKEN=${{ inputs.ZCN_TOKEN }}" >> .env
        echo "MOCK_ZCN_TOKEN=${{ inputs.MOCK_ZCN_TOKEN }}" >> .env
        echo "ETH_TOKEN=${{ inputs.ETH_TOKEN }}" >> .env
        echo "BANCOR_NETWORK=${{ inputs.BANCOR_NETWORK }}" >> .env
        echo "UNISWAP_V2_SWAP_ADDRESS=${{ inputs.UNISWAP_V2_SWAP_ADDRESS }}" >> .env
        echo "BRIDGE=${{ inputs.BRIDGE }}" >> .env
        echo "REVERSE_BRIDGE=${{ inputs.REVERSE_BRIDGE }}" >> .env
        echo "AUTHORIZER_ADDRESS=${{ inputs.AUTHORIZER_ADDRESS }}" >> .env
        echo "BANCOR_TOKEN_ADDRESS=${{ inputs.BANCOR_TOKEN_ADDRESS }}" >> .env
        echo "USDC_TOKEN_ADDRESS=${{ inputs.USDC_TOKEN_ADDRESS }}" >> .env
        echo "EURC_TOKEN_ADDRESS=${{ inputs.EURC_TOKEN_ADDRESS }}" >> .env
        echo "ALCHEMY_API_KEY=${{ inputs.ALCHEMY_API_KEY }}" >> .env
        echo "ETH_NODE_URL=${{ inputs.ETH_NODE_URL }}" >> .env
        echo "NFT_NODE_URL=${{ inputs.NFT_NODE_URL }}" >> .env
        echo "NFT_FACTORY_ADDRESS=${{ inputs.NFT_FACTORY_ADDRESS }}" >> .env
        echo "NFT_FACTORY_MODULE_ERC_721_ADDRESS=${{ inputs.NFT_FACTORY_MODULE_ERC_721_ADDRESS }}" >> .env
        echo "NFT_FACTORY_MODULE_ERC_721_FIXED_ADDRESS=${{ inputs.NFT_FACTORY_MODULE_ERC_721_FIXED_ADDRESS }}" >> .env
        echo "NFT_FACTORY_MODULE_ERC_721_PACK_ADDRESS=${{ inputs.NFT_FACTORY_MODULE_ERC_721_PACK_ADDRESS }}" >> .env
        echo "NFT_FACTORY_MODULE_ERC_721_RANDOM_ADDRESS=${{ inputs.NFT_FACTORY_MODULE_ERC_721_RANDOM_ADDRESS }}" >> .env
        echo "MUMBAI_TESTNET_NETWORK_ID=${{ inputs.MUMBAI_TESTNET_NETWORK_ID }}" >> .env
        echo "POLYGON_MAINNET_NETWORK_ID=${{ inputs.POLYGON_MAINNET_NETWORK_ID }}" >> .env
        echo "MUMBAI_TESTNET_CHAIN_ID=${{ inputs.MUMBAI_TESTNET_CHAIN_ID }}" >> .env
        echo "POLYGON_MAINNET_CHAIN_ID=${{ inputs.POLYGON_MAINNET_CHAIN_ID }}" >> .env
        echo "ETHEREUM_CHAIN_ID=${{ inputs.ETHEREUM_CHAIN_ID }}" >> .env
        echo "BLOCK_EXPLORER_URL=${{ inputs.BLOCK_EXPLORER_URL }}" >> .env

    - name: Copy the wasm binary
      run: |
        cp gosdk/zcn.wasm packages/bolt/public/zcn.wasm
        cp gosdk/zcn.wasm packages/shared/public/zcn.wasm

    - name: Build & Push Docker Image.
      shell: 'script --return --quiet --command "bash {0}"'
      id: docker_build
      run: |
        cd web-apps
        docker build -f ./packages/bolt/docker/dockerfile . -t ${{ secrets.BOLT_REGISTRY }}:latest
        echo $TAG-$SHORT_SHA
        echo "COMMIT_TAG=dev-$TAG-$SHORT_SHA" >>$GITHUB_OUTPUT

        docker tag ${{ secrets.BOLT_REGISTRY }}:latest ${{ secrets.BOLT_REGISTRY }}:dev-$TAG-$SHORT_SHA
        docker push ${{ secrets.BOLT_REGISTRY }}:dev-$TAG-$SHORT_SHA

    - name: Clean Up The Workspace.
      shell: 'script --return --quiet --command "bash {0}"'
      if: ${{ always() }}
      run: |
        rm -rf ./*
