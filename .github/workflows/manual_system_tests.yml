name: "0Chain System Tests"

concurrency:
  group: "manual-system-tests-${{ github.ref }}"
  cancel-in-progress: true

on:
  workflow_call:
    secrets:
      SVC_ACCOUNT_SECRET:
        description: 'A token used for cross-repo actions'
        required: true
      DEV1KC:
        description: 'dev-1 k8s config'
        required: true
      DEV2KC:
        description: 'dev-2 k8s config'
        required: true
      DEV3KC:
        description: 'dev-3 k8s config'
        required: true
      DEV4KC:
        description: 'dev-4 k8s config'
        required: true
      DEV5KC:
        description: 'dev-5 k8s config'
        required: true
      SMART_CONTRACT_OWNER_WALLET_JSON:
        description: 'Smart contract owner wallet'
        required: true
    inputs:
       system_tests_branch:
        description: 'system_tests branch containing the tests you wish to run'
        default: 'master'
        required: true
        type: string
       miner_branch:
         description: 'miner branch which the tests will use'
         default: 'staging'
         required: true
         type: string  
       sharder_branch:
         description: 'sharder branch which the tests will use'
         default: 'staging'
         required: true
         type: string   
       zbox_cli_branch:
        description: '0Box CLI branch which the tests will use'
        default: 'staging'
        required: true
        type: string
       zwallet_cli_branch:
        description: '0Wallet CLI branch which the tests will use'
        default: 'staging'
        required: true
        type: string
       blobber_branch:
        description: 'blobber branch to deploy'
        default: 'staging'
        required: true
        type: string
       validator_branch:
        description: 'validator branch to deploy'
        default: 'staging'
        required: true
        type: string
       zbox_branch:
        description: '0box branch to deploy'
        default: 'staging'
        required: true
        type: string
       zblock_branch:
        description: '0block branch to deploy'
        default: 'staging'
        required: true
        type: string
       zdns_branch:
         description: '0dns branch to deploy'
         default: 'staging'
         required: true
         type: string
       explorer_branch:
         description: 'explorer branch to deploy'
         default: 'staging'
         required: true
         type: string
       zproxy_branch:
         description: '0proxy branch to deploy'
         default: 'staging'
         required: true
         type: string
       zsearch_branch:
         description: '0search branch to deploy'
         default: 'staging'
         required: true
         type: string
       gosdk_branch:
         description: 'gosdk branch to inject into the CLIs'
         default: 'NOT OVERRIDDEN'
         required: false
         type: string
       skip_tests:
        description: '(LAST RESORT ONLY) Skip system tests. This will allow a PR to merge without requiring a green test run.  *By using you certify that the code being merged is not causing system tests to fail*'
        default: 'FALSE'
        required: true
        type: string
jobs:
  system-tests:
    runs-on: [ tests-suite ]
    steps:

    - uses: actions/checkout@v2

    - name: "Setup Test Run"
      run: |
        echo "NETWORK_URL=$(echo dev-${RUNNER_NAME:(-1)}.devnet-0chain.net)" >> $GITHUB_ENV
        echo "RUNNER_NUMBER=${RUNNER_NAME:(-1)}" >> $GITHUB_ENV

        echo "GOSDK_SHA=NONE" >> $GITHUB_ENV
        if [ "${{ inputs.gosdk_branch }}" != "NOT OVERRIDDEN" ]; then
           echo "Using custom gosdk from [${{ inputs.gosdk_branch }}]"
           echo "GOSDK_SHA=$(curl --silent --fail -u ${{ secrets.SVC_ACCOUNT_SECRET }}:x-oauth-basic https://api.github.com/repos/0chain/gosdk/git/refs/heads/${{ inputs.gosdk_branch }} | jq --raw-output .object.sha)" >> $GITHUB_ENV
        fi
        echo '#!/bin/bash

        echo
        echo "========================================================================"
        echo "Finding [$3] docker image for branch [$2]..."
        echo "========================================================================"

        if [[ "$3" == "master" ]]; then
          echo "Docker image [latest] found"
          echo "$(echo $3 | tr 0 Z | awk '"'"'{ print toupper($0) }'"'"')_TAG=latest" >> $GITHUB_ENV
          exit 0
        fi

        exit_code=0
        SHORT_SHA=$(curl --silent -u ${{ secrets.SVC_ACCOUNT_SECRET }}:x-oauth-basic https://api.github.com/repos/0chain/$1/git/refs/heads/$2 | jq --raw-output .object.sha | head -c 8)
        PR_ID=$(curl --silent -u ${{ secrets.SVC_ACCOUNT_SECRET }}:x-oauth-basic https://api.github.com/search/issues?q=sha:$SHORT_SHA | jq --raw-output .items[0].number)
        TAG=$(echo $2 | sed '"'"'s/\//-/g'"'"')

        echo "Searching for image [${TAG}-${SHORT_SHA}]..."
        docker pull 0chaindev/$3:${TAG}-${SHORT_SHA} > /dev/null 2>&1 || exit_code=$?

        if [[ $exit_code == 0 ]];
          then
            echo "Docker image [${TAG}-${SHORT_SHA}] found"
            echo "$(echo $3 | tr 0 Z | awk '"'"'{ print toupper($0) }'"'"')_TAG=${TAG}-${SHORT_SHA}" >> $GITHUB_ENV
          else
            if [ -z "$PR_ID" ];
              then
                echo "::error title=$3 docker image not found::$3 docker image could not be found with tag [${TAG}-${SHORT_SHA}]. Please publish image manually at https://github.com/0chain/$1/actions/workflows/build-&-publish-docker-image.yml and try again" && exit 1
            fi
            echo "Docker image NOT found for [${TAG}-${SHORT_SHA}]"
            MERGE_SHORT_SHA=$(curl --silent -u ${{ secrets.SVC_ACCOUNT_SECRET }}:x-oauth-basic https://api.github.com/repos/0chain/$1/pulls/$PR_ID | jq --raw-output .merge_commit_sha | head -c 8)
            echo "Searching for image [merge-$MERGE_SHORT_SHA]..."
            docker pull 0chaindev/$3:merge-$MERGE_SHORT_SHA > /dev/null 2>&1 || { echo "::error title=$3 docker image not found::$3 docker image could not be found with tags [${TAG}-${SHORT_SHA}] or [merge-$MERGE_SHORT_SHA]. Please publish image manually at https://github.com/0chain/$1/actions/workflows/build-&-publish-docker-image.yml and try again" && exit 1; }
            echo "Docker image [merge-$MERGE_SHORT_SHA] found"
            echo "$(echo $3 | tr 0 Z | awk '"'"'{ print toupper($0) }'"'"')_TAG=merge-$MERGE_SHORT_SHA" >> $GITHUB_ENV
        fi
        unset SHORT_SHA
        unset PR_ID
        unset TAG
        unset MERGE_SHORT_SHA

        ' > ./get_tag.sh;
        chmod 777 ./get_tag.sh;

    - name: "Check docker images have been published"
      if: ${{ inputs.skip_tests == 'FALSE' }}
      run: |
        ./get_tag.sh 0chain ${{ inputs.miner_branch }} miner
        ./get_tag.sh 0chain ${{ inputs.sharder_branch }} sharder
        ./get_tag.sh blobber ${{ inputs.blobber_branch }} blobber
        ./get_tag.sh blobber ${{ inputs.validator_branch }} validator
        ./get_tag.sh 0box ${{ inputs.zbox_branch }} 0box
        ./get_tag.sh 0block ${{ inputs.zblock_branch }} 0block
        ./get_tag.sh 0dns ${{ inputs.zdns_branch }} 0dns
        ./get_tag.sh block-explorer ${{ inputs.explorer_branch }} explorer
        ./get_tag.sh 0proxy ${{ inputs.zproxy_branch }} 0proxy
        ./get_tag.sh 0search ${{ inputs.zsearch_branch }} 0search

    - name: "Set PR Status Pending"
      uses: 0chain/actions/notify-pull-request@feature/notify-PR-convenience
      continue-on-error: true
      with:
        state: "pending"
        message: "manually running against system_test branch [${{ inputs.system_tests_branch }}]"
        system_tests_branch: ${{ inputs.system_tests_branch }}
        zbox_cli_branch: ${{ inputs.zbox_cli_branch }}
        zwallet_cli_branch: ${{ inputs.zwallet_cli_branch }}
        zerochain_branch: ${{ inputs.miner_branch }}
        blobber_branch: ${{ inputs.blobber_branch }}
        gosdk_branch: ${{ inputs.gosdk_branch }}
        zbox_branch: ${{ inputs.zbox_branch }}
        zblock_branch: ${{ inputs.zblock_branch }}
        zdns_branch: ${{ inputs.zdns_branch }}
        explorer_branch: ${{ inputs.explorer_branch }}
        zproxy_branch: ${{ inputs.zproxy_branch }}
        zsearch_branch: ${{ inputs.zsearch_branch }}
        skip_tests: ${{ inputs.skip_tests }}
        github_token: ${{ secrets.SVC_ACCOUNT_SECRET }}

    - name: "Set PR Status"
      if: ${{ success() || failure() || cancelled() }}
      uses: 0chain/actions/notify-pull-request@feature/notify-PR-convenience
      continue-on-error: true
      with:
        state: ${{ job.status }}
        message: "manually ran against system_test branch [${{ inputs.system_tests_branch }}]"
        system_tests_branch: ${{ inputs.system_tests_branch }}
        zbox_cli_branch: ${{ inputs.zbox_cli_branch }}
        zwallet_cli_branch: ${{ inputs.zwallet_cli_branch }}
        zerochain_branch: ${{ inputs.miner_branch }}
        blobber_branch: ${{ inputs.blobber_branch }}
        gosdk_branch: ${{ inputs.gosdk_branch }}
        zbox_branch: ${{ inputs.zbox_branch }}
        zblock_branch: ${{ inputs.zblock_branch }}
        zdns_branch: ${{ inputs.zdns_branch }}
        explorer_branch: ${{ inputs.explorer_branch }}
        zproxy_branch: ${{ inputs.zproxy_branch }}
        zsearch_branch: ${{ inputs.zsearch_branch }}
        skip_tests: ${{ inputs.skip_tests }}
        github_token: ${{ secrets.SVC_ACCOUNT_SECRET }}
