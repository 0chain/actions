name: "0Chain System Tests"
description: "Run 0Chain System Tests"
inputs:
  repo_snapshots_branch:
    description: 'Branch of repo-snapshots that should be used to select images. Overrides explicit branch params.'
    default: ''
    required: false
  system_tests_branch:
    required: false
    description: 'System tests branch to run'
  network:
    required: true
    description: 'Network to run system tests against INSTEAD OF DEPLOYING A NEW NETWORK. [example: dev.0chain.net]'
  zbox_cli_branch:
    required: false
    description: '0Box CLI (branch or commit SHA) which the tests will use'
    default: ''
  zwallet_cli_branch:
    required: false
    description: '0Wallet CLI (branch or commit SHA) which the tests will use'
    default: ''
  s3_migration_cli_branch:
    required: false
    description: 'S3 Migration CLI (branch or commit SHA) which the tests will use'
    default: ''
  deploy_report_page:
    required: true
    default: "true"
    description: ''
  archive_results:
    required: true
    default: "true"
    description: ''
  run_flaky_tests:
    required: true
    default: "true"
    description: ''
  retry_failures:
    required: true
    default: "true"
    description: 'retry failing tests up to 3 times. will not retry when >10 tests have failed as this suggests a wider issue'
  svc_account_secret:
    required: false
    description: 'secret used to publish test results - will use your own credentials if not supplied'
  custom_go_sdk_version:
    required: true
    default: "NONE"
    description: 'custom gosdk version. Will upgrade CLI branches with this before running tests'
  test_file_filter:
    required: false
    default: ""
    description: 'Subset of system tests to run'
  run_cli_system_tests:
    required: false
    default: "true"
    description: 'Enable or disable CLI system tests'
  run_s3mgrt_system_tests:
    required: false
    default: "true"
    description: 'Enable or disable S3 migration CLI system tests'
  run_api_system_tests:
    required: false
    default: "true"
    description: 'Enable or disable API system tests'
  run_challenge_system_tests:
    required: false
    default: "false"
    description: 'Enable or disable Challenge system tests'
  run_frontend_tests:
    required: false
    default: "true"
    description: 'Run frontend system tests (cypress tests)'
  run_tokenomics_system_tests:
    required: false
    default: "false"
    description: 'Enable or disable tokenomics system tests'
  run_smoke_tests:
    required: false
    default: "false"
    description: 'Run subset of system tests (smoke tests)'
  run_chimney_blobber_tests:
    required: false
    default: "false"
    description: 'Run chimney blobber tests'
  TENDERLY_FORK_ID:
    required: true
    description: 'Tenderly fork ID is used to use Tenderly fork simulations for bridge tests'
  DEVOPS_CHANNEL_WEBHOOK_URL:
    required: false
    default: ""
    description: 'notification url'
  S3_SECRET_KEY:
    required: false
    default: ""
    description: 's3 secret key'
  S3_ACCESS_KEY:
    required: false
    default: ""
    description: 's3 access key'

runs:
  using: "composite"
  steps:
    - name: "Get sprint branch from repo_snapshots_branch"
      if: ${{ inputs.repo_snapshots_branch != '' }}
      uses: 0chain/actions/resolve-repo-snapshot@master
      with:
        repo_snapshots_branch: ${{ inputs.repo_snapshots_branch }}
        svc_account_secret: ${{ inputs.svc_account_secret }}
        resolve_images: false

    - name: "Config: Run tests against 0Chain network"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo "RUNNER_NUMBER=${RUNNER_NAME:(-1)}" >> $GITHUB_ENV
        echo '#!/bin/bash
        if [[ -z "$1" || "$1" == "NONE" ]];then
           if [[ -z "$2" ]];then
             echo "::error title=Branch/Image not specified!::$3 was not specified explicitly and could not be resolved using repo_snapshots_branch"
             exit 1
           else
             echo "Using $3 [$2] from repo_snapshots_branch"
             export $3=$2
             echo "$3=$2" >> $GITHUB_ENV
           fi
        else
           echo "Using $3 tag [$1] from repo_snapshots_branch"
           export $3=$1
           echo "$3=$1" >> $GITHUB_ENV
        fi
        ' > ./check-params.sh;
        chmod 777 check-params.sh
        
        ./check-params.sh "${{inputs.zbox_cli_branch}}"         "${{ env.SNAPSHOT_BRANCH_ZBOXCLI }}"      "ZBOX_BRANCH"
        ./check-params.sh "${{inputs.zwallet_cli_branch}}"      "${{ env.SNAPSHOT_BRANCH_ZWALLETCLI }}"   "ZWALLET_BRANCH"
        ./check-params.sh "${{inputs.system_tests_branch}}"     "${{ env.SNAPSHOT_BRANCH_SYSTEM_TEST }}"  "SYSTEM_TESTS_BRANCH"
        ./check-params.sh "${{inputs.s3_migration_cli_branch}}" "${{ env.SNAPSHOT_BRANCH_S3-MIGRATION }}" "S3_MIGRATION_BRANCH"
        ./check-params.sh "${{inputs.custom_go_sdk_version}}"   "${{ env.SNAPSHOT_BRANCH_GOSDK }}"        "GOSDK_VERSION"
        
        echo "NETWORK_URL=$(echo ${{ inputs.network }})" >> $GITHUB_ENV
        echo "GOMODCACHE=/root/actions-runner${RUNNER_NAME:(-1)}/_work/_tool/go/pkg/mod" >> $GITHUB_ENV
        echo "GOCACHE=/root/actions-runner${RUNNER_NAME:(-1)}/_work/_tool/.cache/go-build" >> $GITHUB_ENV
        echo "HOME=/root" >> $GITHUB_ENV
        echo "CYPRESS_NETWORK_URL=$(echo ${{ inputs.network }})" >> $GITHUB_ENV
        
        if [ "${{ inputs.run_smoke_tests }}" != "false" ];
          then
            echo RUN_SMOKE_TESTS=true >> $GITHUB_ENV
          else
            echo RUN_SMOKE_TESTS=false >> $GITHUB_ENV
        fi
        
        if [[ "${{ inputs.run_frontend_tests }}" == "true"  || ("$GOSDK_VERSION" != "" && "$GOSDK_VERSION" != "NONE") ]];
          then
            echo RUN_FRONTEND_TESTS=false >> $GITHUB_ENV
          else
            echo RUN_FRONTEND_TESTS=false >> $GITHUB_ENV
        fi   
        
        if [ "${{ inputs.run_cli_system_tests }}" == "false" ];
          then
            echo RUN_CLI_SYSTEM_TESTS=false >> $GITHUB_ENV
          else
            echo RUN_CLI_SYSTEM_TESTS=true >> $GITHUB_ENV
        fi

        if [ "${{ inputs.run_s3mgrt_system_tests }}" == "false" ];
          then
            echo RUN_S3_CLI_SYSTEM_TESTS=false >> $GITHUB_ENV
          else
            echo RUN_S3_CLI_SYSTEM_TESTS=true >> $GITHUB_ENV
        fi
        
        if [ "${{ inputs.run_api_system_tests }}" == "false" ];
          then
            echo RUN_API_SYSTEM_TESTS=false >> $GITHUB_ENV
          else
            echo RUN_API_SYSTEM_TESTS=true >> $GITHUB_ENV
        fi
        
        if [ "${{ inputs.retry_failures }}" == "true" ];
          then
            echo SHOULD_RETRY_FAILURES='--rerun-fails --rerun-fails-max-failures=25' >> $GITHUB_ENV
          else
            echo SHOULD_RETRY_FAILURES='' >> $GITHUB_ENV
        fi

        if [[ -z "${{ inputs.test_file_filter }}" ]];
          then
            echo RUN_SUBSET_OF_TESTS=false >> $GITHUB_ENV
          else
            echo RUN_SUBSET_OF_TESTS=true >> $GITHUB_ENV
        fi

        if [[ "${{ inputs.run_challenge_system_tests }}" == "false" ]];
          then
            echo RUN_CHALLENGE_SYSTEM_TESTS=false >> $GITHUB_ENV
          else
            echo RUN_CHALLENGE_SYSTEM_TESTS=true >> $GITHUB_ENV
        fi
        
        if [ "${{ inputs.run_tokenomics_system_tests }}" == "false" ];
          then
            echo RUN_TOKENOMICS_SYSTEM_TESTS=false >> $GITHUB_ENV
          else
            echo RUN_TOKENOMICS_SYSTEM_TESTS=true >> $GITHUB_ENV
        fi

        if [ "${{ inputs.run_chimney_blobber_tests }}" == "false" ];
          then
            echo RUN_CHIMNEY_BLOBBER_TESTS=false >> $GITHUB_ENV
          else
            echo RUN_CHIMNEY_BLOBBER_TESTS=true >> $GITHUB_ENV
        fi

    - name: "VIEW TEST CONFIGURATION"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo
        echo "======================================================"
        echo "RUNNING SYSTEM TESTS WITH THE FOLLOWING CONFIGURATION:"
        echo "======================================================"
        echo "System tests branch:           [${{ env.SYSTEM_TESTS_BRANCH }}]"
        echo "repo-snapshots branch:         [${{ env.REPO_SNAPSHOTS_BRANCH }}]"
        echo "0Chain network URL:            [${{ env.NETWORK_URL }}]"
        echo "0box network URL:              [0box.${{ env.NETWORK_URL }}]"
        echo "0box CLI branch:               [${{ env.ZBOX_BRANCH }}]"
        echo "0wallet CLI branch:            [${{ env.ZWALLET_BRANCH }}]"
        echo "s3 migration CLI branch:       [${{ env.S3_MIGRATION_BRANCH }}]"
        echo "Ethereum node URL:             [https://rpc.tenderly.co/fork/${{ inputs.TENDERLY_FORK_ID }}]"
        echo "Custom gosdk version:          [${{ env.GOSDK_VERSION }}]"
        echo "Test file filter:              [${{ inputs.test_file_filter }}]"
        echo "Running CLI tests:             [${{ env.RUN_CLI_SYSTEM_TESTS }}]"
        echo "Running API tests:             [${{ env.RUN_API_SYSTEM_TESTS }}]"
        echo "Running Tokenomics tests:      [${{ env.RUN_TOKENOMICS_SYSTEM_TESTS }}]"
        echo "Running Chimney Blobber tests: [${{ env.RUN_CHIMNEY_BLOBBER_TESTS }}]"
        echo "Running smoke tests:           [${{ env.RUN_SMOKE_TESTS }}]"
        echo "Running frontend tests:        [${{ env.RUN_FRONTEND_TESTS }}]"

    - name: "Checkout System Tests"
      uses: actions/checkout@v3
      with:
        repository: "0chain/system_test"
        ref: ${{ env.SYSTEM_TESTS_BRANCH }}

    - name: "Checkout 0wallet CLI"
      uses: actions/checkout@v3
      with:
        ref: ${{ env.ZWALLET_BRANCH }}
        repository: 0chain/zwalletcli
        fetch-depth: 1
        path: ./zwalletcli

    - name: "Checkout 0box CLI"
      uses: actions/checkout@v3
      with:
        ref: ${{ env.ZBOX_BRANCH }}
        repository: 0chain/zboxcli
        fetch-depth: 1
        path: ./zboxcli

    - name: "Checkout S3 Migration CLI"
      uses: actions/checkout@v3
      with:
        ref: ${{ env.S3_MIGRATION_BRANCH }}
        repository: 0chain/s3-migration
        fetch-depth: 1
        path: ./s3-migration
        token: "${{ inputs.svc_account_secret }}"

    - name: "Install dependencies"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo
        echo "======================================================"
        echo "INSTALL REQUIRED DEPENDENCIES"
        echo "======================================================"
        echo
        echo "1> importing yarn package..."
        sudo curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor > /etc/apt/trusted.gpg.d/yarn.gpg
        sudo sed -i '/yarnpkg/d' /etc/apt/sources.list.d/yarn.list
        sudo echo "deb [signed-by=/etc/apt/trusted.gpg.d/yarn.gpg] https://dl.yarnpkg.com/debian/ stable main" >> /etc/apt/sources.list.d/yarn.list
       
        # echo
        # echo "2> installing youtube-dl..."
        # sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl > build.log 2>&1 || { cat build.log && echo "::error title=Failed to install test dependency::failed to install youtube-dl" && exit 1; }
        # sudo chmod a+rx /usr/local/bin/youtube-dl
        # echo
        
        # echo "3> installing ffmpeg..."
        # sudo apt update > build.log 2>&1 || { sleep 60 && apt update > build.log 2>&1 || { cat build.log && exit 1; }; }
        # sudo apt install -y ffmpeg > build.log 2>&1 || { sleep 60 && sudo apt install -y ffmpeg > build.log 2>&1 || { cat build.log && echo "::error title=Failed to install test dependency::failed to install ffmpeg" && exit 1; }; }
        # echo "Test dependencies install SUCCESS!"

        # echo "4> installing cypress dependencies..."
        # apt install -y yarn libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb

    - name: "Upgrade GoSDK"
      shell: 'script --return --quiet --command "bash {0}"'
      if: ${{ env.GOSDK_VERSION != '' && env.GOSDK_VERSION != 'NONE' }}
      run: |
        echo
        echo "=============================================================="
        echo "UPGRADING GOSDK IN ZBOXCLI, ZWALLETCLI, ZS3CLI & SYSTEM TESTS"
        echo "=============================================================="
        echo
        
        GOSDK_HEAD=$(curl -s -H "Authorization: token ${{ inputs.svc_account_secret }}" https://api.github.com/repos/0chain/gosdk/git/refs/heads/${{ env.GOSDK_VERSION }} | jq -r '.object.sha')
        if [[ "$GOSDK_HEAD" == "null" ]]; then
            echo "[${{ env.GOSDK_VERSION }}] does not seem to be a valid branch (possibly a commit hash?). Will pass directly to go to resolve"
            GOSDK_HEAD="${{ env.GOSDK_VERSION }}"
        fi
        
        echo '#!/bin/bash
        echo "Upgrading [$2] to GOSDK [${{ env.GOSDK_VERSION }}($1)]"
        go get github.com/0chain/gosdk@$1 || { echo "::error title=Failed to retrieve gosdk::failed to retrieve gosdk [${{ env.GOSDK_VERSION }}]" && exit 1; }
        go mod tidy || { echo "::error title=Failed to upgrade $2 gosdk::failed to upgrade $2 gosdk to [${{ env.GOSDK_VERSION }}]" && exit 1; }
        ' > ./upgrade-gosdk.sh;
        chmod 555 ./upgrade-gosdk.sh
        
        cd ./zwalletcli 
        ../upgrade-gosdk.sh $GOSDK_HEAD zwalletcli
        cd ../zboxcli
        ../upgrade-gosdk.sh $GOSDK_HEAD zboxcli
        cd ../s3-migration 
        ../upgrade-gosdk.sh $GOSDK_HEAD zs3cli
        cd ../tests/cli_tests
        ../../upgrade-gosdk.sh $GOSDK_HEAD "CLI System Tests"
        cd ../api_tests
        ../../upgrade-gosdk.sh $GOSDK_HEAD "API System Tests"
        
        sudo rm -rf upgrade-gosdk.sh
        

    - name: "Build CLI Binaries"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo
        echo "======================================================"
        echo "BUILDING 0WALLET AND 0BOX CLI BINARIES:"
        echo "======================================================"
        echo
        
        export HOME="/root"
        
        echo "Building zwalletcli [${{ env.ZWALLET_BRANCH }}]..."
        cd zwalletcli
        make install > build.log 2>&1 || { cat build.log && echo "::error title=zwallet CLI build failed::zwallet CLI build failed" && exit 1; }
        mv zwallet ../tests/cli_tests
        
        echo "Building zboxcli [${{ env.ZBOX_BRANCH }}]..."
        cd ../zboxcli
        make install > build.log 2>&1 || { cat build.log && echo "::error title=zbox CLI build failed::zbox CLI build failed" && exit 1; }
        mv zbox ../tests/cli_tests
        
        echo "Building s3 migration CLI [${{ env.S3_MIGRATION_BRANCH }}]..."
        cd ../s3-migration
        make build > build.log 2>&1 || { cat build.log && echo "::error title=s3 migration CLI build failed::s3 migration CLI build failed" && exit 1; }
        mv s3mgrt ../tests/cli_tests
        
        echo "CLI build SUCCESS!"

    - name: "Set up system tests"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo
        echo "======================================================"
        echo "SETTING UP SYSTEM TESTS:"
        echo "======================================================"
        echo

        if [ -n "${{ env.NAMESPACE }}" ]; then
          kubectl get pods -A --kubeconfig ../kube/${{ env.NAMESPACE }}-config | awk '$5>0' |  awk '$2 ~ /.*miner|sharder|blobber|validator|authorizer|zbox|zdns|NAME|RESTARTS.*/' | awk {'print $2" " $5'} | column -t > pod_status_pre_test_run.txt
        fi

        BRANCH_DIR=$(echo $([ -z '${{ github.event.pull_request.head.sha }}' ] && echo ${GITHUB_REF#refs/*/} || echo $GITHUB_HEAD_REF) |  sed 's/\//_/g')
        echo "BRANCH_DIR=$BRANCH_DIR" >> $GITHUB_ENV
        echo "TEST_TIME=$(date '+%Y-%m-%d_%H.%M.%S')" >> $GITHUB_ENV
        
        go install gotest.tools/gotestsum@latest
        go install github.com/vakenbolt/go-test-report@latest

        sed "s,block_worker:.*,block_worker: https://${{ env.NETWORK_URL }}/dns," -i ./tests/cli_tests/config/config.yaml
        sed "s,block_worker:.*,block_worker: https://${{ env.NETWORK_URL }}/dns," -i ./tests/cli_tests/config/zbox_config.yaml
        sed "s,block_worker:.*,block_worker: https://${{ env.NETWORK_URL }}/dns," -i ./tests/api_tests/config/api_tests_config.yaml
        sed "s,zs3_server_url:.*,zs3_server_url: https://${{ env.NETWORK_URL }}/zs3server," -i ./tests/api_tests/config/api_tests_config.yaml

        sed "s,ethereum_node_url:.*,ethereum_node_url: 'https://rpc.tenderly.co/fork/${{ inputs.TENDERLY_FORK_ID }}'," -i ./tests/cli_tests/config/config.yaml
        sed "s,token_address:.*,token_address: 0xb9EF770B6A5e12E45983C5D80545258aA38F3B78," -i ./tests/cli_tests/config/config.yaml
        sed "s,bridge_address:.*,bridge_address: 0x7700D773022b19622095118Fadf46f7B9448Be9b," -i ./tests/cli_tests/config/config.yaml
        sed "s,authorizer_address:.*,authorizer_address: 0x481daB4407b9880DE0A68dc62E6aF611c4949E42," -i ./tests/cli_tests/config/config.yaml
        sed "s,ethereum_address:.*,ethereum_address: 0x8E25cfd9bd6c0ca67a5522cd920b3c66D39d6E97," -i ./tests/cli_tests/config/config.yaml
        sed "s,password:.*,password: "\12345678\""," -i ./tests/cli_tests/config/config.yaml

        sed "s,ethereum_node_url:.*,ethereum_node_url: 'https://rpc.tenderly.co/fork/${{ inputs.TENDERLY_FORK_ID }}'," -i ./tests/cli_tests/config/zbox_config.yaml
        sed "s,token_address:.*,token_address: 0xb9EF770B6A5e12E45983C5D80545258aA38F3B78," -i ./tests/cli_tests/config/zbox_config.yaml
        sed "s,bridge_address:.*,bridge_address: 0x7700D773022b19622095118Fadf46f7B9448Be9b," -i ./tests/cli_tests/config/zbox_config.yaml
        sed "s,authorizer_address:.*,authorizer_address: 0x481daB4407b9880DE0A68dc62E6aF611c4949E42," -i ./tests/cli_tests/config/zbox_config.yaml
        sed "s,ethereum_address:.*,ethereum_address: 0x8E25cfd9bd6c0ca67a5522cd920b3c66D39d6E97," -i ./tests/cli_tests/config/zbox_config.yaml
        sed "s,password:.*,password: "\12345678\""," -i ./tests/cli_tests/config/zbox_config.yaml

        sed "s,ethereum_node_url:.*,ethereum_node_url: 'https://rpc.tenderly.co/fork/${{ inputs.TENDERLY_FORK_ID }}'," -i ./tests/api_tests/config/api_tests_config.yaml
        sed "s,0box_url:.*,0box_url: https://0box.${{ env.NETWORK_URL }}," -i ./tests/api_tests/config/api_tests_config.yaml
        sed "s,s3_bucket_name:.*,s3_bucket_name: system-tests-s3-migration-small-${{ env.RUNNER_NUMBER }}," -i ./tests/cli_tests/config/cli_tests_config.yaml
        sed "s,s3_bucket_name_alternate:.*,s3_bucket_name_alternate: alternate-test-bucket-${{ env.RUNNER_NUMBER }}," -i ./tests/cli_tests/config/cli_tests_config.yaml
        sed "s,s3_access_key:.*,s3_access_key: ${{ inputs.S3_ACCESS_KEY }}," -i ./tests/cli_tests/config/cli_tests_config.yaml
        sed "s,s3_secret_key:.*,s3_secret_key: ${{ inputs.S3_SECRET_KEY }}," -i ./tests/cli_tests/config/cli_tests_config.yaml
        

        printf '#!/bin/bash\nset -o pipefail\n[ -z "$1" ] && TESTS_TO_RUN="-run  ^Test[^___1P]*$ ./..." || TESTS_TO_RUN=$1\nSMOKE_TEST_MODE=${{ env.RUN_SMOKE_TESTS }} CONFIG_PATH=./config/api_tests_config.yaml go test -timeout=30m $TESTS_TO_RUN -json -count=1 | sed -r "/(=== (CONT|RUN|PAUSE).*)|(--- FAIL:.*)|(\\"Test\\":\\".*\/[pP]arallel\\")/d"' > API_TEST_RUNNER_COMMAND.sh && chmod 777 API_TEST_RUNNER_COMMAND.sh
        printf '#!/bin/bash\nset -o pipefail\n[ -z "$1" ] && TESTS_TO_RUN="-run  ^Test[^K0P][^___]*$ ./..." || TESTS_TO_RUN=$1\nSMOKE_TEST_MODE=${{ env.RUN_SMOKE_TESTS }} CONFIG_PATH=./zbox_config.yaml go test -timeout=120m $TESTS_TO_RUN -json -count=1 | sed -r "/(=== (CONT|RUN|PAUSE).*)|(--- FAIL:.*)|(\\"Test\\":\\".*\/[pP]arallel\\")/d"' > TEST_RUNNER_COMMAND.sh && chmod 777 TEST_RUNNER_COMMAND.sh
        printf '#!/bin/bash\nset -o pipefail\n[ -z "$1" ] && TESTS_TO_RUN="-run  ^Test0S3[^___]*$ ./..." || TESTS_TO_RUN=$1\nSMOKE_TEST_MODE=${{ env.RUN_SMOKE_TESTS }} CONFIG_PATH=./zbox_config.yaml go test -timeout=20m $TESTS_TO_RUN -json -count=1 | sed -r "/(=== (CONT|RUN|PAUSE).*)|(--- FAIL:.*)|(\\"Test\\":\\".*\/[pP]arallel\\")/d"' > S3CLI_TEST_RUNNER_COMMAND.sh && chmod 777 S3CLI_TEST_RUNNER_COMMAND.sh
        printf '#!/bin/bash\nset -o pipefail\n[ -z "$1" ] && TESTS_TO_RUN="-run  ^TestProtocolChallengeTimings[^___]*$ ./..." || TESTS_TO_RUN=$1\nSMOKE_TEST_MODE=${{ env.RUN_SMOKE_TESTS }} CONFIG_PATH=./config/api_tests_config.yaml go test -timeout=30m $TESTS_TO_RUN -json -count=1 | sed -r "/(=== (CONT|RUN|PAUSE).*)|(--- FAIL:.*)|(\\"Test\\":\\".*\/[pP]arallel\\")/d"' > CHALLENGE_API_TEST_RUNNER_COMMAND.sh && chmod 777 CHALLENGE_API_TEST_RUNNER_COMMAND.sh
        printf '#!/bin/bash\nset -o pipefail\n[ -z "$1" ] && TESTS_TO_RUN="-run  ^TestProtocolChallenge[^___]*$ ./..." || TESTS_TO_RUN=$1\nSMOKE_TEST_MODE=${{ env.RUN_SMOKE_TESTS }} CONFIG_PATH=./zbox_config.yaml go test -timeout=120m $TESTS_TO_RUN -json -count=1 | sed -r "/(=== (CONT|RUN|PAUSE).*)|(--- FAIL:.*)|(\\"Test\\":\\".*\/[pP]arallel\\")/d"' > CHALLENGE_TEST_RUNNER_COMMAND.sh && chmod 777 CHALLENGE_TEST_RUNNER_COMMAND.sh
        printf '#!/bin/bash\nset -o pipefail\n[ -z "$1" ] && TESTS_TO_RUN="-run  ^TestKill[^___]*$ ./..." || TESTS_TO_RUN=$1\nSMOKE_TEST_MODE=${{ env.RUN_SMOKE_TESTS }} CONFIG_PATH=./zbox_config.yaml go test -timeout=120m $TESTS_TO_RUN -json -count=1 | sed -r "/(=== (CONT|RUN|PAUSE).*)|(--- FAIL:.*)|(\\"Test\\":\\".*\/[pP]arallel\\")/d"' > KILL_TEST_RUNNER_COMMAND.sh && chmod 777 KILL_TEST_RUNNER_COMMAND.sh
        printf '#!/bin/bash\nset -o pipefail\n[ -z "$1" ] && TESTS_TO_RUN="-run  ^Test[^___]*$ ./..." || TESTS_TO_RUN=$1\nSMOKE_TEST_MODE=${{ env.RUN_SMOKE_TESTS }} CONFIG_PATH=./config/tokenomics_tests_config.yaml go test -timeout=120m $TESTS_TO_RUN -json -count=1 | sed -r "/(=== (CONT|RUN|PAUSE).*)|(--- FAIL:.*)|(\\"Test\\":\\".*\/[pP]arallel\\")/d"' > TOKENOMICS_TEST_RUNNER_COMMAND.sh && chmod 777 TOKENOMICS_TEST_RUNNER_COMMAND.sh
        printf '#!/bin/bash\nset -o pipefail\n[ -z "$1" ] && TESTS_TO_RUN="-run  ^Test1ChimneyBlobberRewards$ ./..." || TESTS_TO_RUN=$1\nSMOKE_TEST_MODE=${{ env.RUN_SMOKE_TESTS }} CONFIG_PATH=./config/api_tests_config.yaml go test -timeout=90m $TESTS_TO_RUN -json -count=1 | sed -r "/(=== (CONT|RUN|PAUSE).*)|(--- FAIL:.*)|(\\"Test\\":\\".*\/[pP]arallel\\")/d"' > CHIMNEY_BLOBBER_TEST_RUNNER_COMMAND.sh && chmod 777 CHIMNEY_BLOBBER_TEST_RUNNER_COMMAND.sh
        printf '#!/bin/bash\nset -o pipefail\nSMOKE_TEST_MODE=${{ env.RUN_SMOKE_TESTS }} CONFIG_PATH=./zbox_config.yaml go test -timeout=60m -run  "^Test___Flaky.*$" ./... -json -count=1 | sed -r "/(=== (CONT|RUN|PAUSE).*)|(--- FAIL:.*)|(\\"Test\\":\\".*\/[pP]arallel\\")/d"' > FLAKY_TEST_RUNNER_COMMAND.sh && chmod 777 FLAKY_TEST_RUNNER_COMMAND.sh

        mkdir -p ${BRANCH_DIR}/${GITHUB_SHA}/api
        mkdir -p ${BRANCH_DIR}/${GITHUB_SHA}/cli
        mkdir -p ${BRANCH_DIR}/${GITHUB_SHA}/s3cli
        mkdir -p ${BRANCH_DIR}/${GITHUB_SHA}/challengetestscli
        mkdir -p ${BRANCH_DIR}/${GITHUB_SHA}/challengetestsapi
        mkdir -p ${BRANCH_DIR}/${GITHUB_SHA}/killtestscli
        mkdir -p ${BRANCH_DIR}/${GITHUB_SHA}/flaky_cli
        mkdir -p ${BRANCH_DIR}/${GITHUB_SHA}/tokenomics
        mkdir -p ${BRANCH_DIR}/latest/api
        mkdir -p ${BRANCH_DIR}/latest/cli
        mkdir -p ${BRANCH_DIR}/latest/s3cli
        mkdir -p ${BRANCH_DIR}/latest/challengetestscli
        mkdir -p ${BRANCH_DIR}/latest/challengetestsapi
        mkdir -p ${BRANCH_DIR}/latest/killtestscli
        mkdir -p ${BRANCH_DIR}/latest/flaky_cli
        mkdir -p ${BRANCH_DIR}/latest/tokenomics

        cd tests/cli_tests
        (./zwallet version --configDir ./config --config ./zbox_config.yaml --wallet ../ignore --silent | grep -A2 'Version info' | sed "s/Version info:/ZWallet Version Info:/") || true
        (./zbox version --configDir ./config --config ./zbox_config.yaml --wallet ../ignore --silent | grep -A2 'Version info' | sed "s/Version info:/ZBox Version Info:/") || true
        echo "TESTS_READY=true" >> $GITHUB_ENV

    - name: "Set up frontend tests"
      if:  ${{ env.RUN_FRONTEND_TESTS == 'true' }}
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo
        echo "======================================================"
        echo "SETTING WASM TESTS:"
        echo "======================================================"
        git clone -q https://github.com/0chain/gosdk.git
        cd gosdk

        if [[ -n "${{  env.GOSDK_VERSION }}" && "${{  env.GOSDK_VERSION }}" != "NONE" ]];
        then
          git checkout ${{  env.GOSDK_VERSION }}
        fi

        cd ..

    - name: Run frontend Tests
      if:  ${{ env.RUN_FRONTEND_TESTS == 'true' && env.RUN_SUBSET_OF_TESTS == 'false' }}
      uses: cypress-io/github-action@v5
      with:
        working-directory: ./gosdk/wasmsdk/cypress
        record: false
        install-command: yarn start:system-tests
        start: yarn start

    - name: "Run API System Tests"
      shell: 'script --return --quiet --command "bash {0}"'
      if:  ${{ always() && env.TESTS_READY && env.RUN_API_SYSTEM_TESTS == 'true' && env.RUN_SUBSET_OF_TESTS == 'false' }}
      run: |
        echo
        echo "======================================================"
        echo "RUNNING API SYSTEM TESTS:"
        echo "======================================================"
        echo

        export HOME="/root"
        GOPATH=$(echo $(go env GOPATH))

        cd tests/api_tests
        api_system_tests_exit_code=0
        ${GOPATH}/bin/gotestsum --jsonfile test-output.json --hide-summary=output --format testname ${{ env.SHOULD_RETRY_FAILURES }} --raw-command -- ../../API_TEST_RUNNER_COMMAND.sh || api_system_tests_exit_code=$?
        cat test-output.json | ${GOPATH}/bin/go-test-report --groupSize 1 --output ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/api/index.html --title "0Chain API System test suite [${{ env.BRANCH_DIR }}/${GITHUB_SHA:0:8}] ran against [${{ env.NETWORK_URL }}] at [${{ env.TEST_TIME }}]"

        cp -R ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/api ../../${{ env.BRANCH_DIR }}/latest/
        echo "API_TESTS_RAN=true" >> $GITHUB_ENV

        if [[ $api_system_tests_exit_code == 0 ]];
          then
            echo API_TESTS_PASSED=true >> $GITHUB_ENV
          else
            echo API_TESTS_PASSED=false >> $GITHUB_ENV
            echo "::error title=API System tests faled!::API System tests failed. Ensure tests are running against the correct images/branches and rule out any possible code issues before attempting a re-run"
        fi
        
        exit $api_system_tests_exit_code

    - name: "Archive API Test Config & Console Output"
      continue-on-error: true
      if: ${{ always() && env.RUN_API_SYSTEM_TESTS == 'true' && env.RUN_SUBSET_OF_TESTS == 'false' }}
      uses: actions/upload-artifact@v3
      with:
        name: API-System-Test-${{ env.TEST_TIME }}
        path: |
          ./tests/api_tests/config
          ./${{ env.BRANCH_DIR }}/latest/api/index.html

    - name: "Run S3 CLI System Tests"
      shell: 'script --return --quiet --command "bash {0}"'
      if: ${{ always() && env.TESTS_READY && env.RUN_SUBSET_OF_TESTS == 'false' && env.RUN_S3_CLI_SYSTEM_TESTS == 'true' }}
      run: |
        echo
        echo "======================================================"
        echo "RUNNING S3 CLI SYSTEM TESTS:"
        echo "======================================================"
        echo

        export HOME="/root"

        GOPATH=$(echo $(go env GOPATH))

        cd tests/cli_tests
        system_tests_exit_code=0
        echo "Sequential tests are currently running.... It will take a few minutes for initial test output to appear..."
        echo
        ${GOPATH}/bin/gotestsum --jsonfile test-output.json --hide-summary=output --format testname ${{ env.SHOULD_RETRY_FAILURES }} --raw-command -- ../../S3CLI_TEST_RUNNER_COMMAND.sh || system_tests_exit_code=$?
        cat test-output.json | ${GOPATH}/bin/go-test-report --groupSize 1 --output ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/s3cli/index.html --title "0Chain S3 CLI System tests [${{ env.BRANCH_DIR }}/${GITHUB_SHA:0:8}] ran against [${{ env.NETWORK_URL }}] at [${{ env.TEST_TIME }}]"

        cp -R ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/s3cli ../../${{ env.BRANCH_DIR }}/latest/
        echo "TESTS_RAN=true" >> $GITHUB_ENV

        if [[ $system_tests_exit_code == 0 ]];
          then
            echo S3CLI_TESTS_PASSED=true >> $GITHUB_ENV
          else
            echo S3CLI_TESTS_PASSED=false >> $GITHUB_ENV
            echo "::error title=S3 CLI System tests faled!::S3 CLI System tests failed. Ensure tests are running against the correct images/branches and rule out any possible code issues before attempting a re-run"
        fi
        
        exit $system_tests_exit_code

    - name: "Archive S3CLI Config & Console Output"
      continue-on-error: true
      if: ${{ env.RUN_SUBSET_OF_TESTS == 'false' && env.RUN_S3_CLI_SYSTEM_TESTS == 'true' }}
      uses: actions/upload-artifact@v3
      with:
        name: System-Test-${{ env.TEST_TIME }}
        path: |
          ./tests/cli_tests/config
          ./tests/cli_tests/cmdlog.log
          ./${{ env.BRANCH_DIR }}/latest/s3cli/index.html

    - name: "Run Challenge System Tests"
      shell: 'script --return --quiet --command "bash {0}"'
      if: ${{ always() && env.TESTS_READY && env.RUN_SUBSET_OF_TESTS == 'false' && env.RUN_CHALLENGE_SYSTEM_TESTS == 'true' }}
      run: |
        echo
        echo "======================================================"
        echo "RUNNING CHALLENGE SYSTEM TESTS:"
        echo "======================================================"
        echo

        export HOME="/root"
        GOPATH=$(echo $(go env GOPATH))

        echo '
        block_worker: https://${{ env.NETWORK_URL }}/dns
        signature_scheme: bls0chain
        min_submit: 50 # in percentage
        min_confirmation: 50 # in percentage
        confirmation_chain_length: 3
        store_unlock_duration_sec: 2
        ' > config.yaml
        echo '{"client_id":"a9652ec2b8d32b860f9cc00e989a2ce574f93f84886168866775d625b12eac50","client_key":"c7db9e0640566ed3352104377786b21df491b026898af0c0dd62241638cc700d07d23f6890afc9e3a1606f76130bc5658b4bcce16d074ef97ed11d90adb867a2","keys":[{"public_key":"c7db9e0640566ed3352104377786b21df491b026898af0c0dd62241638cc700d07d23f6890afc9e3a1606f76130bc5658b4bcce16d074ef97ed11d90adb867a2","private_key":"d35ac69eb7338167a01a34804a280ef534800bc885fcb10dbfc7b51c9df25b10"}],"mnemonics":"country suspect autumn silk blade chief suffer cigar into fortune lazy letter million length bullet cube project parrot race lock lawsuit donor glad basket","version":"1.0","date_created":"1661874692","nonce":0}' > zs3wallet.json
        
        cp tests/cli_tests/zwallet .
        cp tests/cli_tests/zbox .

        ####### CREATING ALLOCATION THAT SHOULD RECEIVE CHALLENGES #######
        truncate -s 1000000 upload_test_file
        ./zwallet faucet --methodName "pour" --tokens 9000 --input "{}" --configDir . --config ./config.yaml --wallet ./zs3wallet.json --silent
        ./zbox newallocation --lock 5000 --data 3 --parity 3 --size 1000000000 --configDir . --config ./config.yaml --wallet ./zs3wallet.json --silent | grep 'Allocation' | grep -o "[a-z0-9]\{64\}" > allocation1.txt
        echo "Allocation 1 hash: $(cat allocation1.txt)"
        ./zbox upload --allocation "$(cat allocation1.txt)" --localpath ./upload_test_file --remotepath /upload_test_file --configDir . --config ./config.yaml --wallet ./zs3wallet.json --silent
        
        ####### CREATING ALLOCATION WITH UPLOAD AND DELETE THAT SHOULD NOT RECEIVE CHALLENGES #######
        ./zwallet faucet --methodName "pour" --tokens 9000 --input "{}" --configDir . --config ./config.yaml --wallet ./zs3wallet.json --silent
        ./zbox newallocation --lock 5000 --data 3 --parity 3 --size 1000000000 --configDir . --config ./config.yaml --wallet ./zs3wallet.json --silent | grep 'Allocation' | grep -o "[a-z0-9]\{64\}" > allocation2.txt
        echo "Allocation 2 hash: $(cat allocation2.txt)"
        ./zbox upload --allocation "$(cat allocation2.txt)" --localpath ./upload_test_file --remotepath /upload_test_file --configDir . --config ./config.yaml --wallet ./zs3wallet.json --silent
        sleep 5
        ./zbox delete --allocation "$(cat allocation2.txt)" --remotepath /upload_test_file --configDir . --config ./config.yaml --wallet ./zs3wallet.json --silent
        
        ####### CREATING EMPTY ALLOCATION SHOULD NOT RECEIVE CHALLENGES #######
        ./zwallet faucet --methodName "pour" --tokens 9000 --input "{}" --configDir . --config ./config.yaml --wallet ./zs3wallet.json --silent
        ./zbox newallocation --lock 5000 --data 3 --parity 3 --size 1000000000 --configDir . --config ./config.yaml --wallet ./zs3wallet.json --silent | grep 'Allocation' | grep -o "[a-z0-9]\{64\}" > allocation3.txt
        echo "Allocation 3 hash: $(cat allocation3.txt)"
        
        ######## Updating allocation with add blobber and added blobber should receive challenges #######
        ./zwallet faucet --methodName "pour" --tokens 9000 --input "{}" --configDir . --config ./config.yaml --wallet ./zs3wallet.json --silent
        ./zbox newallocation --lock 5000 --data 2 --parity 2 --size 1000000000 --configDir . --config ./config.yaml --wallet ./zs3wallet.json --silent | grep 'Allocation' | grep -o "[a-z0-9]\{64\}" > allocation4.txt
        echo "Allocation 4 hash: $(cat allocation4.txt)"
        
        # Get the allocation response using the zbox command and store it in a variable
        allocation_response=$(./zbox getallocation --allocation "$(cat allocation4.txt)" --configDir . --config ./config.yaml --wallet ./zs3wallet.json --json)
        
        echo "Allocation response:"
        echo "$allocation_response"
        
        # Get the ls-blobbers response using the zbox command and store it in a variable
        ls_blobbers_response=$(./zbox ls-blobbers --configDir . --config ./config.yaml --wallet ./zs3wallet.json --json)
        
        echo "ls-blobbers response:"
        echo "$ls_blobbers_response"
        
        # Extract blobber IDs from the get-allocation response
        blobber_ids=$(echo "$allocation_response" | jq -r '.blobbers[].id')
        
        echo "Blobber IDs in the allocation response:"
        echo "$blobber_ids"
        
        # Extract blobber IDs from the ls-blobbers response
        ls_blobber_ids=$(echo "$ls_blobbers_response" | jq -r '.[].id')
        
        echo "Blobber IDs in the ls-blobbers response:"
        echo "$ls_blobber_ids"
        
        while IFS= read -r blobber_id; do
          echo "Checking Blobber ID: $blobber_id"
        
          # Check if the Blobber ID exists in the allocation response
          exists_in_allocation=$(echo "$blobber_ids" | grep -w "$blobber_id")
          echo "Blobber ID $blobber_id exists in allocation response: $exists_in_allocation"
        
          # If the Blobber ID does not exist in the allocation response, select it and break the loop
          if [ -z "$exists_in_allocation" ]; then
            add_blobber_id=$blobber_id
            echo "Selected Blobber ID: $add_blobber_id"
            break
          fi
        done <<< $ls_blobber_ids
        
        ./zbox updateallocation --add_blobber "$add_blobber_id" --allocation "$(cat allocation4.txt)" --configDir . --config ./config.yaml --wallet ./zs3wallet.json --silent
        ./zbox upload --allocation "$(cat allocation4.txt)" --localpath ./upload_test_file --remotepath /upload_test_file --configDir . --config ./config.yaml --wallet ./zs3wallet.json --silent
        
        # Insert add blobber id in challenge_blobbers.txt
        echo "$add_blobber_id" >> challenge_blobbers.txt
        
        ######## Updating allocation with add and remove blobber and where added blobber should receive and removed blobber should not receive challenges ########
        ./zwallet faucet --methodName "pour" --tokens 9000 --input "{}" --configDir . --config ./config.yaml --wallet ./zs3wallet.json --silent
        ./zbox newallocation --lock 5000 --data 2 --parity 2 --size 1000000000 --configDir . --config ./config.yaml --wallet ./zs3wallet.json --silent | grep 'Allocation' | grep -o "[a-z0-9]\{64\}" > allocation5.txt
        echo "Allocation 5 hash: $(cat allocation5.txt)"
        
        # Get the allocation response using the zbox command and store it in a variable
        allocation_response=$(./zbox getallocation --allocation "$(cat allocation5.txt)" --configDir . --config ./config.yaml --wallet ./zs3wallet.json --json)
        
        # Get the ls-blobbers response using the zbox command and store it in a variable
        ls_blobbers_response=$(./zbox ls-blobbers --configDir . --config ./config.yaml --wallet ./zs3wallet.json --json)
        
        # Extract blobber IDs from the get-allocation response
        blobber_ids=$(echo "$allocation_response" | jq -r '.blobbers[].id')
        
        # Extract blobber IDs from the ls-blobbers response
        ls_blobber_ids=$(echo "$ls_blobbers_response" | jq -r '.[].id')
        
        # Logging
        echo "Blobber IDs in the allocation response:"
        echo "$blobber_ids"
        echo "Blobber IDs in the ls-blobbers response:"
        echo "$ls_blobber_ids"
        
        while IFS= read -r blobber_id; do
          echo "Checking Blobber ID: $blobber_id"
        
          # Check if the Blobber ID exists in the allocation response
          exists_in_allocation=$(echo "$blobber_ids" | grep -w "$blobber_id")
          echo "Blobber ID $blobber_id exists in allocation response: $exists_in_allocation"
        
          # If the Blobber ID does not exist in the allocation response, select it and break the loop
          if [ -n "$exists_in_allocation" ]; then
            remove_blobber_id=$blobber_id
            echo "Selected Blobber ID: $remove_blobber_id"
            break
          fi
        done <<< $ls_blobber_ids
        
        while IFS= read -r blobber_id; do
          echo "Checking Blobber ID: $blobber_id"
        
          # Check if the Blobber ID exists in the allocation response
          exists_in_allocation=$(echo "$blobber_ids" | grep -w "$blobber_id")
          echo "Blobber ID $blobber_id exists in allocation response: $exists_in_allocation"
        
          # If the Blobber ID does not exist in the allocation response, select it and break the loop
          if [ -z "$exists_in_allocation" ]; then
            add_blobber_id=$blobber_id
            echo "Selected Blobber ID: $add_blobber_id"
            break
          fi
        done <<< $ls_blobber_ids
        
        if [ -z "$add_blobber_id" ]; then
          echo "All Blobbers are in use. Randomly selected Blobber ID: $add_blobber_id"
        else 
          echo "Randomly selected Blobber ID: $add_blobber_id"
        
          ./zbox updateallocation --add_blobber "$add_blobber_id" --remove_blobber "$remove_blobber_id" --allocation "$(cat allocation5.txt)" --configDir . --config ./config.yaml --wallet ./zs3wallet.json --silent
          ./zbox upload --allocation "$(cat allocation5.txt)" --localpath ./upload_test_file --remotepath /upload_test_file --configDir . --config ./config.yaml --wallet ./zs3wallet.json --silent
          
          # Insert add and remove blobber id in challenge_blobbers.txt
          echo "$add_blobber_id" >> challenge_blobbers.txt
          echo "$remove_blobber_id" >> challenge_blobbers.txt
        fi
        
        ####### CANCELLED ALLOCATION SHOULD NOT GET CHALLENGES ANYMORE #######
        ./zwallet faucet --methodName "pour" --tokens 9000 --input "{}" --configDir . --config ./config.yaml --wallet ./zs3wallet.json --silent
        ./zbox newallocation --lock 5000 --data 3 --parity 3 --size 1000000000 --configDir . --config ./config.yaml --wallet ./zs3wallet.json --silent | grep 'Allocation' | grep -o "[a-z0-9]\{64\}" > allocation6.txt
        echo "Allocation 6 hash: $(cat allocation6.txt)"
        ./zbox upload --allocation "$(cat allocation6.txt)" --localpath ./upload_test_file --remotepath /upload_test_file --configDir . --config ./config.yaml --wallet ./zs3wallet.json --silent
        sleep 5
        ./zbox alloc-cancel --allocation "$(cat allocation6.txt)" --configDir . --config ./config.yaml --wallet ./zs3wallet.json --silent
        
        # Storing all three allocation IDs in a single file
        touch challenge_allocations.txt
        cat allocation1.txt allocation2.txt allocation3.txt allocation4.txt allocation5.txt allocation6.txt > challenge_allocations.txt
        
        # Removing redundant files
        rm allocation1.txt allocation2.txt allocation3.txt allocation4.txt allocation5.txt allocation6.txt
        
        # List all the files in current dir 
        echo "Files in current dir:"
        echo "$(ls -l)"
        
        # cat challenge_allocations.txt and challenge_blobbers.txt
        echo "challenge_allocations.txt:"
        echo "$(cat challenge_allocations.txt)"
        echo "challenge_blobbers.txt:"
        echo "$(cat challenge_blobbers.txt)"

        # Move files to tests/cli_tests
        mv challenge_allocations.txt tests/cli_tests/
        mv challenge_blobbers.txt tests/cli_tests/

        cd tests/cli_tests
        system_tests_exit_code=0

        echo "Sleeping for 1 hour..."
        sleep 3600
        echo "Tests started..."
        ${GOPATH}/bin/gotestsum --jsonfile test-output.json --hide-summary=output --format testname ${{ env.SHOULD_RETRY_FAILURES }} --raw-command -- ../../CHALLENGE_TEST_RUNNER_COMMAND.sh || system_tests_exit_code=$?
        cat test-output.json | ${GOPATH}/bin/go-test-report --groupSize 1 --output ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/challengetestscli/index.html --title "0Chain System test suite: Challenge tests [${{ env.BRANCH_DIR }}/${GITHUB_SHA:0:8}] ran against [${{ env.NETWORK_URL }}] at [${{ env.TEST_TIME }}]"

        cp -R ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/challengetestscli ../../${{ env.BRANCH_DIR }}/latest/

        cd ../api_tests
        challenge_api_tests_exit_code=0

        echo "Challenge API Tests started..."
        ${GOPATH}/bin/gotestsum --jsonfile test-output.json --hide-summary=output --format testname ${{ env.SHOULD_RETRY_FAILURES }} --raw-command -- ../../CHALLENGE_API_TEST_RUNNER_COMMAND.sh || challenge_api_tests_exit_code=$?
        cat test-output.json | ${GOPATH}/bin/go-test-report --groupSize 1 --output ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/challengetestsapi/index.html --title "0Chain System test suite: Challenge API tests [${{ env.BRANCH_DIR }}/${GITHUB_SHA:0:8}] ran against [${{ env.NETWORK_URL }}] at [${{ env.TEST_TIME }}]"

        cp -R ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/challengetestsapi ../../${{ env.BRANCH_DIR }}/latest/
        echo "TESTS_RAN=true" >> $GITHUB_ENV

        if [[ $system_tests_exit_code == 0 && challenge_api_tests_exit_code == 0 ]];
          then
            echo CHALLENGE_TESTS_PASSED=true >> $GITHUB_ENV
          else
            echo CHALLENGE_TESTS_PASSED=false >> $GITHUB_ENV
            echo "::error title=CHALLENGE System tests faled!::CHALLENGE System tests failed. Ensure tests are running against the correct images/branches and rule out any possible code issues before attempting a re-run"
        fi

        exit $system_tests_exit_code

    - name: "Archive Challenge tests Config & Console Output"
      continue-on-error: true
      if: ${{ env.RUN_SUBSET_OF_TESTS == 'false' && env.RUN_CHALLENGE_SYSTEM_TESTS == 'true' }}
      uses: actions/upload-artifact@v3
      with:
        name: System-Test-${{ env.TEST_TIME }}
        path: |
          ./tests/cli_tests/config
          ./tests/cli_tests/cmdlog.log
          ./${{ env.BRANCH_DIR }}/latest/challengetestscli/index.html
          ./${{ env.BRANCH_DIR }}/latest/challengetestsapi/index.html

    - name: "Run CLI System Tests"
      shell: 'script --return --quiet --command "bash {0}"'
      if: ${{ always() && env.TESTS_READY && env.RUN_SUBSET_OF_TESTS == 'false' && env.RUN_CLI_SYSTEM_TESTS == 'true' }}
      run: |
        echo
        echo "======================================================"
        echo "RUNNING SYSTEM TESTS:"
        echo "======================================================"
        echo
        
        export HOME="/root"

        GOPATH=$(echo $(go env GOPATH))

        cd tests/cli_tests
        system_tests_exit_code=0
        echo "Sequential tests are currently running.... It will take a few minutes for initial test output to appear..."
        echo
        ${GOPATH}/bin/gotestsum --jsonfile test-output.json --hide-summary=output --format testname ${{ env.SHOULD_RETRY_FAILURES }} --raw-command -- ../../TEST_RUNNER_COMMAND.sh || system_tests_exit_code=$?
        cat test-output.json | ${GOPATH}/bin/go-test-report --groupSize 1 --output ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/cli/index.html --title "0Chain System test suite [${{ env.BRANCH_DIR }}/${GITHUB_SHA:0:8}] ran against [${{ env.NETWORK_URL }}] at [${{ env.TEST_TIME }}]"

        ${GOPATH}/bin/gotestsum --jsonfile test-output.json --hide-summary=output --format testname ${{ env.SHOULD_RETRY_FAILURES }} --raw-command -- ../../KILL_TEST_RUNNER_COMMAND.sh || system_tests_exit_code=$?
        cat test-output.json | ${GOPATH}/bin/go-test-report --groupSize 1 --output ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/killtestscli/index.html --title "0Chain System test suite: Kill tests [${{ env.BRANCH_DIR }}/${GITHUB_SHA:0:8}] ran against [${{ env.NETWORK_URL }}] at [${{ env.TEST_TIME }}]"

        cp -R ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/cli ../../${{ env.BRANCH_DIR }}/latest/
        cp -R ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/killtestscli ../../${{ env.BRANCH_DIR }}/latest/
        echo "TESTS_RAN=true" >> $GITHUB_ENV

        if [[ $system_tests_exit_code == 0 ]];
          then
            echo TESTS_PASSED=true >> $GITHUB_ENV
          else
            echo TESTS_PASSED=false >> $GITHUB_ENV
            echo "::error title=System tests faled!::System tests failed. Ensure tests are running against the correct images/branches and rule out any possible code issues before attempting a re-run"
        fi

        exit $system_tests_exit_code

    - name: "Run subset of CLI System Tests"
      if:  ${{ always() && env.TESTS_READY && env.RUN_SUBSET_OF_TESTS == 'true' }}
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        export HOME="/root"
        if [ -n "${{ env.NAMESPACE }}" ]; then
          kubectl get pods -A --kubeconfig ../kube/${{ env.NAMESPACE }}-config | awk '$5>0' |  awk '$2 ~ /.*miner|sharder|blobber|validator|authorizer|zbox|zdns|NAME|RESTARTS.*/' | awk {'print $2" " $5'} | column -t > pod_status_pre_test_run.txt
        fi

        cd tests/cli_tests

        testFiles=$(echo ${{ inputs.test_file_filter }} | sed 's/,/ /g')
        echo "Attempting to resolve filter to test files..."
        ls $(echo $testFiles)

        fileListResult="$?"

        if [ "$fileListResult" != "0" ];
          then
            echo "::error title=Test files do not exist!::One or more of the test files requested [$testFiles] could not be found" && exit 1
          else
            echo "SUCCESS!"
        fi

        testFunctions=$(grep -o '^[^\/]*func Test.*' $(echo $testFiles) | sed 's/^[^/]*func \(Test[A-Za-z0-9_]*\).*$/\1/' | paste -sd "|" -)

        if [ -z "$testFunctions" ];
          then
            echo "::error title=Test functions not found!::No test functions found in any of the test files requested [$testFiles]" && exit 1
        fi

        printf '#!/bin/bash\nset -o pipefail\n[ -z "$1" ] && TESTS_TO_RUN="-run  '$testFunctions' ./..." || TESTS_TO_RUN=$1\nCONFIG_PATH=./zbox_config.yaml go test -timeout=60m $TESTS_TO_RUN -json -count=1 | sed -r "/(=== (CONT|RUN|PAUSE).*)|(--- FAIL:.*)|(\\"Test\\":\\".*\/[pP]arallel\\")/d"' > SUBSET_TEST_RUNNER_COMMAND.sh && chmod 777 SUBSET_TEST_RUNNER_COMMAND.sh

        echo
        echo "======================================================"
        echo "RUNNING [$(echo $testFunctions | awk '{ print toupper($0) }')] SYSTEM TESTS"
        echo "======================================================"
        echo

        system_tests_exit_code=0
        GOPATH=$(echo $(go env GOPATH))
        ${GOPATH}/bin/gotestsum --jsonfile test-output.json --hide-summary=output --format testname ${{ env.SHOULD_RETRY_FAILURES }} --raw-command -- ./SUBSET_TEST_RUNNER_COMMAND.sh || system_tests_exit_code=$?
        cat test-output.json | ${GOPATH}/bin/go-test-report --groupSize 1 --output ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/cli/index.html --title "Subset of 0Chain System test suite [${{ env.BRANCH_DIR }}/${GITHUB_SHA:0:8}] ran against [${{ env.NETWORK_URL }}] at [${{ env.TEST_TIME }}]"

        cp -R ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/cli ../../${{ env.BRANCH_DIR }}/latest/
        echo "TESTS_RAN=true" >> $GITHUB_ENV

        if [[ $system_tests_exit_code == 0 ]];
          then
            echo TESTS_PASSED=true >> $GITHUB_ENV
          else
            echo TESTS_PASSED=false >> $GITHUB_ENV
            echo "::error title=System tests faled!::System tests failed. Ensure tests are running against the correct images/branches and rule out any possible code issues before attempting a re-run"
        fi

        exit $system_tests_exit_code

    - name: "Archive CLI Config & Console Output"
      continue-on-error: true
      if: ${{ always() && env.TESTS_RAN == 'true' && inputs.archive_results == 'true' }}
      uses: actions/upload-artifact@v3
      with:
        name: System-Test-${{ env.TEST_TIME }}
        path: |
          ./tests/cli_tests/config
          ./tests/cli_tests/cmdlog.log
          ./${{ env.BRANCH_DIR }}/latest/cli/index.html
          ./${{ env.BRANCH_DIR }}/latest/killtestscli/index.html

    - name: "Run Tokenomics System Tests"
      shell: 'script --return --quiet --command "bash {0}"'
      if:  ${{ always() && env.TESTS_READY && env.RUN_TOKENOMICS_SYSTEM_TESTS == 'true' && env.RUN_SUBSET_OF_TESTS == 'false' }}
      run: |
        echo
        echo "======================================================"
        echo "RUNNING TOKENOMICS SYSTEM TESTS:"
        echo "======================================================"
        echo
        export HOME="/root"
        cd tests/tokenomics_tests
        tokenomics_system_tests_exit_code=0
        GOPATH=$(echo $(go env GOPATH))
        ${GOPATH}/bin/gotestsum --jsonfile test-output.json --hide-summary=output --format testname ${{ env.SHOULD_RETRY_FAILURES }} --raw-command -- ../../TOKENOMICS_TEST_RUNNER_COMMAND.sh || tokenomics_system_tests_exit_code=$?
        cat test-output.json | ${GOPATH}/bin/go-test-report --groupSize 1 --output ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/tokenomics/index.html --title "0Chain Tokenomics System test suite [${{ env.BRANCH_DIR }}/${GITHUB_SHA:0:8}] ran against [${{ env.NETWORK_URL }}] at [${{ env.TEST_TIME }}]"

        cp -R ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/tokenomics ../../${{ env.BRANCH_DIR }}/latest/
        if [[ $tokenomics_system_tests_exit_code == 0 ]];
          then
            echo TOKENOMICS_TESTS_PASSED=true >> $GITHUB_ENV
          else
            echo TOKENOMICS_TESTS_PASSED=false >> $GITHUB_ENV
            echo "::error title=Tokenomics System tests faled!::Tokenomics System tests failed. Ensure tests are running against the correct images/branches and rule out any possible code issues before attempting a re-run"
        fi

        exit $tokenomics_system_tests_exit_code

    - name: "Archive Tokenomics Test Config & Console Output"
      continue-on-error: true
      if: ${{ always() && env.RUN_TOKENOMICS_SYSTEM_TESTS == 'true' && env.RUN_SUBSET_OF_TESTS == 'false' }}
      uses: actions/upload-artifact@v3
      with:
        name: Tokenomics-System-Test-${{ env.TEST_TIME }}
        path: |
          ./tests/tokenomics_tests/config
          ./${{ env.BRANCH_DIR }}/latest/tokenomics/index.html

    - name: "Run Chimney Blobber System Tests"
      shell: 'script --return --quiet --command "bash {0}"'
      if:  ${{ always() && env.TESTS_READY && env.RUN_CHIMNEY_BLOBBER_TESTS == 'true' && env.RUN_SUBSET_OF_TESTS == 'false' }}
      run: |
        echo
        echo "======================================================"
        echo "RUNNING Chimney Blobber SYSTEM TESTS:"
        echo "======================================================"
        echo
        export HOME="/root"
        cd tests/api_tests
        chimney_blobber_tests_exit_code=0
        GOPATH=$(echo $(go env GOPATH))
        ${GOPATH}/bin/gotestsum --jsonfile test-output.json --hide-summary=output --format testname ${{ env.SHOULD_RETRY_FAILURES }} --raw-command -- ../../CHIMNEY_BLOBBER_TEST_RUNNER_COMMAND.sh || chimney_blobber_tests_exit_code=$?
        cat test-output.json | ${GOPATH}/bin/go-test-report --groupSize 1 --output ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/api/chimney_blobber_index.html --title "0Chain Chimney Blobber System test suite [${{ env.BRANCH_DIR }}/${GITHUB_SHA:0:8}] ran against [${{ env.NETWORK_URL }}] at [${{ env.TEST_TIME }}]"

        cp -R ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/api ../../${{ env.BRANCH_DIR }}/latest/
        if [[ $chimney_blobber_tests_exit_code == 0 ]];
          then
            echo CHIMNEY_BLOBBER_TESTS_PASSED=true >> $GITHUB_ENV
          else
            echo CHIMNEY_BLOBBER_TESTS_PASSED=false >> $GITHUB_ENV
            echo "::error title=Chimney Blobber System tests faled!::Chimney Blobber System tests failed. Ensure tests are running against the correct images/branches and rule out any possible code issues before attempting a re-run"
        fi

        exit $chimney_blobber_tests_exit_code

    - name: "Archive Chimney Blobber Test Config & Console Output"
      continue-on-error: true
      if: ${{ always() && env.RUN_CHIMNEY_BLOBBER_TESTS == 'true' && env.RUN_SUBSET_OF_TESTS == 'false' }}
      uses: actions/upload-artifact@v3
      with:
        name: Chimney-Blobber-Test-${{ env.TEST_TIME }}
        path: |
          ./tests/api_tests/config
          ./${{ env.BRANCH_DIR }}/latest/api_tests/chimney_blobber_index.html

    - name: "System Stability Check"
      if: ${{ always() && (env.TESTS_RAN == 'true' || env.API_TESTS_RAN == 'true') }}
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        if [ -n "${{ env.NAMESPACE }}" ];
          then
            kubectl get pods -A --kubeconfig ../kube/${{ env.NAMESPACE }}-config | awk '$5>0' |  awk '$2 ~ /.*miner|sharder|blobber|validator|authorizer|zbox|zdns|NAME|RESTARTS.*/' | awk {'print $2" " $5'} | column -t > pod_status_post_test_run.txt
            echo "Pod status pre test run (some restarts are normal as the network stabilises):"
            cat pod_status_pre_test_run.txt
            echo "Pod status post test run (no further restarts should have taken place for the network to be considered stable):"
            cat pod_status_post_test_run.txt

            if [[ "$(cat pod_status_pre_test_run.txt | md5sum)" == "$(cat pod_status_post_test_run.txt | md5sum)" ]];
              then
                echo "0Chain did not crash during system tests"
                echo PODS_CRASHED=false >> $GITHUB_ENV
              else
                echo PODS_CRASHED=true >> $GITHUB_ENV
                echo TESTS_PASSED=false >> $GITHUB_ENV
                echo "::error title=0Chain crashed during test run!::One or more 0Chain components (listed below) crashed during the test run, therefore the build is NOT STABLE"
                comm -1 -3 pod_status_pre_test_run.txt pod_status_post_test_run.txt
                echo "Printing panic or fatal logs of restarted containers"
                comm -1 -3 pod_status_pre_test_run.txt pod_status_post_test_run.txt > diff_file.txt
                awk '{print $1}' diff_file.txt | while read pod_name; do echo -e '\033[0;33m'$pod_name'\033[0m'; kubectl logs -n ${{ env.NAMESPACE }} po/$pod_name --previous --kubeconfig ../kube/${{ env.NAMESPACE }}-config | grep 'panic\|fatal' ; done || true
                mkdir logs && cd logs && touch crashed-logs.txt && cd ..
                awk '{print $1}' diff_file.txt | while read pod_name; do echo -e '\033[0;33m'$pod_name'\033[0m'; kubectl logs -n ${{ env.NAMESPACE }} po/$pod_name --previous --kubeconfig ../kube/${{ env.NAMESPACE }}-config >> ./logs/crashed-logs.txt ; done || true
                exit 1
            fi
          else
            echo "NOT preforming system stability check because network was not deployed as part of this test run"
        fi

    - name: "Run Flaky CLI System Tests"
      if:  ${{ always() && env.TESTS_READY && env.TESTS_PASSED == 'true' && inputs.run_flaky_tests == 'true' }}
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo
        echo "======================================================"
        echo "RUNNING FLAKY SYSTEM TESTS:"
        echo "======================================================"
        echo
        export HOME="/root"
        GOPATH=$(echo $(go env GOPATH))
        
        cd tests/cli_tests
        rm -rf cmdlog.log || true
        rm -rf test-output.json || true
        ${GOPATH}/bin/gotestsum --jsonfile test-output.json --hide-summary=output --format testname --raw-command -- ../../FLAKY_TEST_RUNNER_COMMAND.sh || true
        cat test-output.json | ${GOPATH}/bin/go-test-report --groupSize 1 --output ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/flaky_cli/index.html --title "0Chain Flaky system test suite [${{ env.BRANCH_DIR }}/${GITHUB_SHA:0:8}] ran against [${{ env.NETWORK_URL }}] at [${{ env.TEST_TIME }}]"
        cp -R ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/flaky_cli ../../${{ env.BRANCH_DIR }}/latest/
        echo "FLAKY_TESTS_RAN=true" >> $GITHUB_ENV

    - name: "Archive Flaky Test CLI Config & Console Output"
      continue-on-error: true
      if: ${{ always() && env.FLAKY_TESTS_RAN == 'true' && inputs.archive_results  == 'true'}}
      uses: actions/upload-artifact@v3
      with:
        name: Flaky-System-Test-${{ env.TEST_TIME }}
        path: |
          ./tests/cli_tests/config
          ./tests/cli_tests/cmdlog.log
          ./${{ env.BRANCH_DIR }}/latest/flaky_cli/index.html


    - name: "Extract Logs From Pods"
      continue-on-error: true
      if: ${{ failure() && env.NAMESPACE != '' }}
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo
        echo "======================================================"
        echo "Extracting Logging From Pods:"
        echo "======================================================"

        echo '#!/bin/bash
        app=$1
        output=$2

        Green="\033[0;32m"

        podname=$(kubectl -n ${{ env.NAMESPACE }} --kubeconfig ../kube/${{ env.NAMESPACE }}-config get pods --no-headers -l app=$app -o custom-columns=:metadata.name)

        echo -ne "$Green [+] $app:$podname "
        kubectl -n ${{ env.NAMESPACE }} --kubeconfig ../kube/${{ env.NAMESPACE }}-config cp $podname:log $output && echo "OK"


        kubectl -n ${{ env.NAMESPACE }} --kubeconfig ../kube/${{ env.NAMESPACE }}-config get events --sort-by='.metadata.creationTimestamp' | grep $podname
        ' > ./logging.sh

        chmod 777 ./logging.sh;

        echo "-----------------------------"
        echo "> Show blobbers"
        echo "-----------------------------"
        ls -lha
        echo $PWD
        echo $HOME
        cd tests/cli_tests
        ./zbox --configDir ./config --config ./zbox_config.yaml --wallet ../ignore ls-blobbers --all
        cd ../..

        echo "-----------------------------"
        echo "> Show pods"
        echo "-----------------------------"
        kubectl -n ${{ env.NAMESPACE }} --kubeconfig ../kube/${{ env.NAMESPACE }}-config get pods

        echo "-----------------------------"
        echo "> Extract logs"
        echo "-----------------------------"
        ./logging.sh 0chain-sharder-01 ./logs/sharder-01
        ./logging.sh 0chain-sharder-02 ./logs/sharder-02

        echo
        ./logging.sh 0chain-miner-01 ./logs/miner-01
        ./logging.sh 0chain-miner-02 ./logs/miner-02
        ./logging.sh 0chain-miner-03 ./logs/miner-03

        echo
        ./logging.sh blobber-blobber-01 ./logs/blobber-01
        ./logging.sh blobber-blobber-02 ./logs/blobber-02
        ./logging.sh blobber-blobber-03 ./logs/blobber-03
        ./logging.sh blobber-blobber-04 ./logs/blobber-04
        ./logging.sh blobber-blobber-05 ./logs/blobber-05
        ./logging.sh blobber-blobber-06 ./logs/blobber-06

        echo
        ./logging.sh blobber-validator-01 ./logs/validator-01
        ./logging.sh blobber-validator-02 ./logs/validator-02
        ./logging.sh blobber-validator-03 ./logs/validator-03
        ./logging.sh blobber-validator-04 ./logs/validator-04
        ./logging.sh blobber-validator-05 ./logs/validator-05
        ./logging.sh blobber-validator-06 ./logs/validator-06

    - name: "Archive Sharder Logs"
      continue-on-error: true
      if: ${{ failure() && env.NAMESPACE != '' }}
      uses: actions/upload-artifact@v3
      with:
        name: logging-pods-tests-sharder
        path: |
          ./logs/sharder-01
          ./logs/sharder-02
        retention-days: 5

    - name: "Archive Miner Logs"
      continue-on-error: true
      if: ${{ failure() && env.NAMESPACE != '' }}
      uses: actions/upload-artifact@v3
      with:
        name: logging-pods-tests-miner
        path: |
          ./logs/miner-01
          ./logs/miner-02
          ./logs/miner-03
        retention-days: 5

    - name: "Archive Blobber Logs"
      continue-on-error: true
      if: ${{ failure() && env.NAMESPACE != '' }}
      uses: actions/upload-artifact@v3
      with:
        name: logging-pods-tests-blobber
        path: |
          ./logs/blobber-01
          ./logs/blobber-01
          ./logs/blobber-03
          ./logs/blobber-04
          ./logs/blobber-05
          ./logs/blobber-06
        retention-days: 5

    - name: "Archive Validator Logs"
      continue-on-error: true
      if: ${{ failure() && env.NAMESPACE != '' }}
      uses: actions/upload-artifact@v3
      with:
        name: logging-pods-tests-validator
        path: |
          ./logs/validator-01
          ./logs/validator-01
          ./logs/validator-03
          ./logs/validator-04
          ./logs/validator-05
          ./logs/validator-06
        retention-days: 5
    
    - name: "Archive Crash Logs"
      continue-on-error: true
      if: ${{ failure() && env.NAMESPACE != '' }}
      uses: actions/upload-artifact@v3
      with:
        name: logging-crashed-pods
        path: |
          ./logs/crashed-logs.txt
          
        retention-days: 5

    - name: "Deploy report pages"
      continue-on-error: true
      if: ${{ always() && env.TESTS_RAN == 'true' && inputs.deploy_report_page == 'true' }}
      uses: peaceiris/actions-gh-pages@v3
      with:
        publish_branch: test_reports
        keep_files: true
        github_token: "${{ inputs.svc_account_secret }}"
        publish_dir: "./${{ env.BRANCH_DIR }}"
        destination_dir: "./${{ env.BRANCH_DIR }}"
        user_name: "github-actions[bot]"
        user_email: "github-actions[bot]@users.noreply.github.com"

    - name: "Wait for report deployment to complete"
      continue-on-error: true
      if: ${{ always() && env.TESTS_RAN == 'true' && inputs.deploy_report_page == 'true' }}
      shell: 'script --return --quiet --command "bash {0}"'
      run: counter=0; while [ $counter -lt 5 ] && curl -o /dev/null -Isw '%{http_code}\n' "https://0chain.github.io/${{ github.event.repository.name }}/${{ env.BRANCH_DIR }}/${GITHUB_SHA}/cli/index.html?t=$(date +%s)" | grep -v 200 > /dev/null; do sleep 10 && echo "Waiting for report page to deploy..." && ((counter=counter+1)); done

    - name: "Report Links"
      continue-on-error: true
      if: ${{ always() && env.TESTS_RAN == 'true' && inputs.deploy_report_page == 'true' }}
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo
        echo "======================================================"
        echo "SYSTEM TESTS HTML REPORTS:"
        echo "======================================================"
        echo
        echo "::notice title=System tests report::System tests report: https://0chain.github.io/${{ github.event.repository.name }}/${{ env.BRANCH_DIR }}/${GITHUB_SHA}/cli/index.html"
        echo "::notice title=API System tests report::API System tests report: https://0chain.github.io/${{ github.event.repository.name }}/${{ env.BRANCH_DIR }}/${GITHUB_SHA}/api/index.html"
        if [ "${{ env.FLAKY_TESTS_RAN }}" == "true" ];
           then
              echo "::notice title=Flaky system tests report::Flaky system tests report: https://0chain.github.io/${{ github.event.repository.name }}/${{ env.BRANCH_DIR }}/${GITHUB_SHA}/flaky_cli/index.html"
        fi

    - name: "Notify Slack"
      continue-on-error: true
      if: ${{ failure() && github.ref == 'refs/heads/staging' && github.event_name != 'workflow_dispatch' && github.event.repository.name != 'system_test' }}
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        payload='{
        "text": "'"<!here> System tests FAILED on ${{ github.event.repository.name }} ${GITHUB_REF#refs/*/} after merge by ${{ github.actor }}.\n Please investigae!\n Test results are here: https://github.com/0chain/${{ github.event.repository.name }}/actions/runs/${{ github.run_id }}"'",
        "attachments": [
            {
            "text": "SYSTEM TESTS FAILED ⚠️",
            "color": "#ff0000"
            }
        ]
        }'
        curl -X POST -H 'Content-type: application/json' --data "${payload}" ${{ inputs.DEVOPS_CHANNEL_WEBHOOK_URL }}
        # curl -X POST -H "Content-type: application/json" --data "{\"text\":\"<!here> System tests FAILED on ${{ github.event.repository.name }} ${GITHUB_REF#refs/*/} after merge by ${{ github.actor }}. Please investigae! Test results are here: https://github.com/0chain/${{ github.event.repository.name }}/actions/runs/${{ github.run_id }}\"}" ${{ inputs.DEVOPS_CHANNEL_WEBHOOK_URL }}
