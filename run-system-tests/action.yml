name: "0Chain System Tests"
description: "Run 0Chain System Tests"
inputs:
  system_tests_branch:
    required: false
    description: 'System tests branch to run'
  network:
    required: true
    description: 'Network to run system tests against INSTEAD OF DEPLOYING A NEW NETWORK. [example: dev.0chain.net]'
  zbox_cli_branch:
    required: true
    description: '0Box CLI (branch or commit SHA) which the tests will use'
    default: 'staging'
  zwallet_cli_branch:
    required: true
    description: '0Wallet CLI (branch or commit SHA) which the tests will use'
    default: 'staging'
  deploy_report_page:
    required: true
    default: "true"
    description: ''
  archive_results:
    required: true
    default: "true"
    description: ''
  run_flaky_tests:
    required: true
    default: "true"
    description: ''
  retry_failures:
    required: true
    default: "true"
    description: 'retry failing tests up to 3 times. will not retry when >10 tests have failed as this suggests a wider issue'
  svc_account_secret:
    required: false
    description: 'secret used to publish test results - will use your own credentials if not supplied'
  custom_go_sdk_version:
    required: true
    default: "NONE"
    description: 'custom gosdk version. Will upgrade CLI branches with this before running tests'
  test_file_filter:
    required: false
    default: ""
    description: 'Subset of system tests to run'
  run_cli_system_tests:
    required: false
    default: "true"
    description: 'Enable or disable CLI system tests'
  run_api_system_tests:
    required: false
    default: "true"
    description: 'Enable or disable API system tests'
  run_tokenomics_system_tests:
    required: false
    default: "false"
    description: 'Enable or disable tokenomics system tests'
  TENDERLY_FORK_ID:
    required: true
    description: 'Tenderly fork ID is used to use Tenderly fork simulations for bridge tests'
  DEVOPS_CHANNEL_WEBHOOK_URL:
    required: false
    default: ""
    description: 'notification url'

runs:
  using: "composite"
  steps:
    - name: "Config: Run tests against 0Chain network"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo "SYSTEM_TESTS_BRANCH=$(echo $(([ -z '${{inputs.system_tests_branch}}' ] && echo  ${GITHUB_REF#refs/*/}) || echo '${{inputs.system_tests_branch}}'))" >> $GITHUB_ENV
        echo "NETWORK_URL=$(echo ${{ inputs.network }})" >> $GITHUB_ENV
        echo "ZBOX_BRANCH=$(echo ${{inputs.zbox_cli_branch}})" >> $GITHUB_ENV
        echo "ZWALLET_BRANCH=$(echo ${{inputs.zwallet_cli_branch}})" >> $GITHUB_ENV
        echo "GOMODCACHE=/root/actions-runner${RUNNER_NAME:(-1)}/_work/_tool/go/pkg/mod" >> $GITHUB_ENV
        echo "GOCACHE=/root/actions-runner${RUNNER_NAME:(-1)}/_work/_tool/.cache/go-build" >> $GITHUB_ENV
        echo "HOME=/root" >> $GITHUB_ENV
    - name: "VIEW TEST CONFIGURATION"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo
        echo "======================================================"
        echo "RUNNING SYSTEM TESTS WITH THE FOLLOWING CONFIGURATION:"
        echo "======================================================"
        echo
        echo "System tests branch:      [${{ env.SYSTEM_TESTS_BRANCH }}]"
        echo "0Chain network URL:       [${{ env.NETWORK_URL }}]"
        echo "0box network URL:         [0box.${{ env.NETWORK_URL }}]"
        echo "0box CLI branch:          [${{ env.ZBOX_BRANCH }}]"
        echo "0wallet CLI branch:       [${{ env.ZWALLET_BRANCH }}]"
        echo "Ethereum node URL:        [https://rpc.tenderly.co/fork/${{ inputs.TENDERLY_FORK_ID }}]"
        echo "Custom gosdk version:     [${{ inputs.custom_go_sdk_version }}]"
        echo "Test file filter:         [${{ inputs.test_file_filter }}]"
        echo "Running CLI tests:        [${{ inputs.run_cli_system_tests }}]"
        echo "Running API tests:        [${{ inputs.run_api_system_tests }}]"
        echo "Running Tokenomics tests: [${{ inputs.run_tokenomics_system_tests }}]"

    - name: "Checkout System Tests"
      uses: actions/checkout@v3
      with:
        repository: "0chain/system_test"
        ref: ${{ env.SYSTEM_TESTS_BRANCH }}

    - name: "Checkout 0wallet CLI"
      uses: actions/checkout@v3
      with:
        ref: ${{ env.ZWALLET_BRANCH }}
        repository: 0chain/zwalletcli
        fetch-depth: 1
        path: ./zwalletcli

    - name: "Checkout 0box CLI"
      uses: actions/checkout@v3
      with:
        ref: ${{ env.ZBOX_BRANCH }}
        repository: 0chain/zboxcli
        fetch-depth: 1
        path: ./zboxcli

    - name: "Setup Go"
      # uses: actions/setup-go@v3
      # with:
      #   go-version: ^1.20
      #   cache: false
      shell: bash
      run: |
        [ -f ./https://go.dev/dl/go1.20.3.linux-amd64.tar.gz ] || wget https://go.dev/dl/go1.20.3.linux-amd64.tar.gz
        rm -rf /usr/local/go && tar -C /usr/local -xzf ./go1.20.3.linux-amd64.tar.gz
        echo "PATH=$PATH:/usr/local/go/bin" >> $GITHUB_ENV
        export PATH=$PATH:/usr/local/go/bin
        # go env -w GOMODCACHE=/root/actions-runner${RUNNER_NAME:(-1)}/_work/_tool/go/pkg/mod
        # go env -w GOCACHE=/root/actions-runner${RUNNER_NAME:(-1)}/_work/_tool/.cache/go-build
        go env


    - name: "Install dependencies"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo
        echo "======================================================"
        echo "INSTALL REQUIRED DEPENDENCIES"
        echo "======================================================"
        echo
        echo "installing youtube-dl..."
        sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl > build.log 2>&1 || { cat build.log && echo "::error title=Failed to install test dependency::failed to install youtube-dl" && exit 1; }
        sudo chmod a+rx /usr/local/bin/youtube-dl
        echo "installing ffmpeg..."
        sudo apt update > build.log 2>&1 || { sleep 60 && apt update > build.log 2>&1 || { cat build.log && exit 1; }; }
        sudo apt install -y ffmpeg > build.log 2>&1 || { sleep 60 && sudo apt install -y ffmpeg > build.log 2>&1 || { cat build.log && echo "::error title=Failed to install test dependency::failed to install ffmpeg" && exit 1; }; }
        echo "Test dependencies install SUCCESS!"

    - name: "Build CLI Binaries"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo
        echo "======================================================"
        echo "BUILDING 0WALLET AND 0BOX CLI BINARIES:"
        echo "======================================================"
        echo
        echo "Building zwalletcli [${{ env.ZWALLET_BRANCH }}]..."
        cd zwalletcli
  
        if [[ -n "${{ inputs.custom_go_sdk_version }}" && "${{ inputs.custom_go_sdk_version }}" != "NONE" ]];
        then
          echo "Upgrading zwalletcli to GOSDK [${{ inputs.custom_go_sdk_version }}]"
          go get github.com/0chain/gosdk@${{ inputs.custom_go_sdk_version }} || { echo "::error title=Failed to retrieve gosdk::failed to retrieve gosdk [${{ inputs.custom_go_sdk_version }}]" && exit 1; }
          go mod tidy || { echo "::error title=Failed to upgrade gosdk on zwallet CLI::failed to upgrade zwallet CLI gosdk to [${{ inputs.custom_go_sdk_version }}]" && exit 1; }
        fi
        make install > build.log 2>&1 || { cat build.log && echo "::error title=zwallet CLI build failed::zwallet CLI build failed" && exit 1; }
        mv zwallet ../tests/cli_tests
        echo "Building zboxcli [${{ env.ZBOX_BRANCH }}]..."
        cd ../zboxcli
        if [[ -n "${{ inputs.custom_go_sdk_version }}" && "${{ inputs.custom_go_sdk_version }}" != "NONE" ]];
        then
          echo "Upgrading zboxcli to GOSDK [${{ inputs.custom_go_sdk_version }}]"
          go get github.com/0chain/gosdk@${{ inputs.custom_go_sdk_version }} || { echo "::error title=Failed to retrieve gosdk::failed to retrieve gosdk [${{ inputs.custom_go_sdk_version }}]" && exit 1; }
          go mod tidy || { echo "::error title=Failed to upgrade gosdk on zbox CLI::failed to upgrade zbox CLI gosdk to [${{ inputs.custom_go_sdk_version }}]" && exit 1; }
        fi
        make install > build.log 2>&1 || { cat build.log && echo "::error title=zbox CLI build failed::zbox CLI build failed" && exit 1; }
        mv zbox ../tests/cli_tests
        echo "CLI build SUCCESS!"

    - name: "Set up system tests"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo
        echo "======================================================"
        echo "SETTING UP SYSTEM TESTS:"
        echo "======================================================"
        echo
        if [ "${{ inputs.run_cli_system_tests }}" == "false" ];
           then
              echo RUN_CLI_SYSTEM_TESTS=false >> $GITHUB_ENV
          else
              echo RUN_CLI_SYSTEM_TESTS=true >> $GITHUB_ENV
        fi
        
        if [ "${{ inputs.run_api_system_tests }}" == "false" ];
           then
              echo RUN_API_SYSTEM_TESTS=false >> $GITHUB_ENV
          else
              echo RUN_API_SYSTEM_TESTS=true >> $GITHUB_ENV
        fi
        
        if [ "${{ inputs.retry_failures }}" == "true" ];
           then
              echo SHOULD_RETRY_FAILURES='--rerun-fails --rerun-fails-max-failures=25' >> $GITHUB_ENV
          else
              echo SHOULD_RETRY_FAILURES='' >> $GITHUB_ENV
        fi

        if [[ -z "${{ inputs.test_file_filter }}" ]];
           then
              echo RUN_SUBSET_OF_TESTS=false >> $GITHUB_ENV
           else
              echo RUN_SUBSET_OF_TESTS=true >> $GITHUB_ENV
        fi
        
         if [ "${{ inputs.run_tokenomics_system_tests }}" == "false" ];
           then
              echo RUN_TOKENOMICS_SYSTEM_TESTS=false >> $GITHUB_ENV
          else
              echo RUN_TOKENOMICS_SYSTEM_TESTS=true >> $GITHUB_ENV
        fi

        BRANCH_DIR=$(echo $([ -z '${{ github.event.pull_request.head.sha }}' ] && echo ${GITHUB_REF#refs/*/} || echo $GITHUB_HEAD_REF) |  sed 's/\//_/g')
        echo "BRANCH_DIR=$BRANCH_DIR" >> $GITHUB_ENV
        echo "TEST_TIME=$(date '+%Y-%m-%d_%H.%M.%S')" >> $GITHUB_ENV
        
        go install gotest.tools/gotestsum@latest
        go install github.com/vakenbolt/go-test-report@latest

        sed "s,block_worker:.*,block_worker: https://${{ env.NETWORK_URL }}/dns," -i ./tests/cli_tests/config/zbox_config.yaml
        sed "s,block_worker:.*,block_worker: https://${{ env.NETWORK_URL }}/dns," -i ./tests/api_tests/config/api_tests_config.yaml
        sed "s,zs3_server_url:.*,zs3_server_url: https://${{ env.NETWORK_URL }}/zs3server," -i ./tests/api_tests/config/api_tests_config.yaml
        sed "s,ethereum_node_url:.*,ethereum_node_url: 'https://rpc.tenderly.co/fork/${{ inputs.TENDERLY_FORK_ID }}'," -i ./tests/cli_tests/config/zbox_config.yaml
        sed "s,ethereum_node_url:.*,ethereum_node_url: 'https://rpc.tenderly.co/fork/${{ inputs.TENDERLY_FORK_ID }}'," -i ./tests/api_tests/config/api_tests_config.yaml
        sed "s,EthereumNodeURL:.*,EthereumNodeURL: 'https://rpc.tenderly.co/fork/${{ inputs.TENDERLY_FORK_ID }}'," -i ./tests/cli_tests/config/bridge.yaml
        sed "s,EthereumNodeURL:.*,EthereumNodeURL: 'https://rpc.tenderly.co/fork/${{ inputs.TENDERLY_FORK_ID }}'," -i ./tests/cli_tests/config/owner.yaml
        sed "s,0box_url:.*,0box_url: https://0box.${{ env.NETWORK_URL }}," -i ./tests/api_tests/config/api_tests_config.yaml

        printf '#!/bin/bash\nset -o pipefail\n[ -z "$1" ] && TESTS_TO_RUN="-run  ^Test[^___]*$ ./..." || TESTS_TO_RUN=$1\nCONFIG_PATH=./config/api_tests_config.yaml go test -timeout=20m $TESTS_TO_RUN -json -count=1 | sed -r "/(=== (CONT|RUN|PAUSE).*)|(--- FAIL:.*)|(\\"Test\\":\\".*\/[pP]arallel\\")/d"' > API_TEST_RUNNER_COMMAND.sh && chmod 777 API_TEST_RUNNER_COMMAND.sh
        printf '#!/bin/bash\nset -o pipefail\n[ -z "$1" ] && TESTS_TO_RUN="-run  ^Test[^___]*$ ./..." || TESTS_TO_RUN=$1\nCONFIG_PATH=./zbox_config.yaml go test -timeout=120m $TESTS_TO_RUN -json -count=1 | sed -r "/(=== (CONT|RUN|PAUSE).*)|(--- FAIL:.*)|(\\"Test\\":\\".*\/[pP]arallel\\")/d"' > TEST_RUNNER_COMMAND.sh && chmod 777 TEST_RUNNER_COMMAND.sh
        printf '#!/bin/bash\nset -o pipefail\n[ -z "$1" ] && TESTS_TO_RUN="-run  ^Test[^___]*$ ./..." || TESTS_TO_RUN=$1\nCONFIG_PATH=./config/tokenomics_tests_config.yaml go test -timeout=120m $TESTS_TO_RUN -json -count=1 | sed -r "/(=== (CONT|RUN|PAUSE).*)|(--- FAIL:.*)|(\\"Test\\":\\".*\/[pP]arallel\\")/d"' > TOKENOMICS_TEST_RUNNER_COMMAND.sh && chmod 777 TOKENOMICS_TEST_RUNNER_COMMAND.sh
        printf '#!/bin/bash\nset -o pipefail\nCONFIG_PATH=./zbox_config.yaml go test -timeout=60m -run  "^Test___Flaky.*$" ./... -json -count=1 | sed -r "/(=== (CONT|RUN|PAUSE).*)|(--- FAIL:.*)|(\\"Test\\":\\".*\/[pP]arallel\\")/d"' > FLAKY_TEST_RUNNER_COMMAND.sh && chmod 777 FLAKY_TEST_RUNNER_COMMAND.sh

        mkdir -p ${BRANCH_DIR}/${GITHUB_SHA}/api
        mkdir -p ${BRANCH_DIR}/${GITHUB_SHA}/cli
        mkdir -p ${BRANCH_DIR}/${GITHUB_SHA}/flaky_cli
        mkdir -p ${BRANCH_DIR}/${GITHUB_SHA}/tokenomics
        mkdir -p ${BRANCH_DIR}/latest/api
        mkdir -p ${BRANCH_DIR}/latest/cli
        mkdir -p ${BRANCH_DIR}/latest/flaky_cli
        mkdir -p ${BRANCH_DIR}/latest/tokenomics

        cd tests/cli_tests
#        (./zwallet version --configDir ./config --config ./zbox_config.yaml --wallet ../ignore --silent | grep -A2 'Version info' | sed "s/Version info:/ZWallet Version Info:/") || true
#        (./zbox version --configDir ./config --config ./zbox_config.yaml --wallet ../ignore --silent | grep -A2 'Version info' | sed "s/Version info:/ZBox Version Info:/") || true

    - name: "Run API System Tests"
      shell: 'script --return --quiet --command "bash {0}"'
      if:  ${{ env.RUN_API_SYSTEM_TESTS == 'true' && env.RUN_SUBSET_OF_TESTS == 'false' }}
      run: |
        echo
        echo "======================================================"
        echo "RUNNING API SYSTEM TESTS:"
        echo "======================================================"
        echo
        
        GOPATH=$(echo $(go env GOPATH))

        cd tests/api_tests
        api_system_tests_exit_code=0
        ${GOPATH}/bin/gotestsum --jsonfile test-output.json --hide-summary=output --format testname ${{ env.SHOULD_RETRY_FAILURES }} --raw-command -- ../../API_TEST_RUNNER_COMMAND.sh || api_system_tests_exit_code=$?
        cat test-output.json | ${GOPATH}/bin/go-test-report --groupSize 1 --output ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/api/index.html --title "0Chain API System test suite [${{ env.BRANCH_DIR }}/${GITHUB_SHA:0:8}] ran against [${{ env.NETWORK_URL }}] at [${{ env.TEST_TIME }}]"

        cp -R ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/api ../../${{ env.BRANCH_DIR }}/latest/
        if [[ $api_system_tests_exit_code == 0 ]];
          then
            echo API_TESTS_PASSED=true >> $GITHUB_ENV
          else
            echo API_TESTS_PASSED=false >> $GITHUB_ENV
            echo "::error title=API System tests faled!::API System tests failed. Ensure tests are running against the correct images/branches and rule out any possible code issues before attempting a re-run"
        fi

        exit $api_system_tests_exit_code

    - name: "Archive API Test Config & Console Output"
      if: ${{ always() && env.RUN_API_SYSTEM_TESTS == 'true' && env.RUN_SUBSET_OF_TESTS == 'false' }}
      uses: actions/upload-artifact@v3
      with:
        name: API-System-Test-${{ env.TEST_TIME }}
        path: |
          ./tests/api_tests/config
          ./${{ env.BRANCH_DIR }}/latest/api/index.html

    - name: "Run CLI System Tests"
      shell: 'script --return --quiet --command "bash {0}"'
      if: ${{ env.RUN_SUBSET_OF_TESTS == 'false' && env.RUN_CLI_SYSTEM_TESTS == 'true' }}
      run: |
        echo
        echo "======================================================"
        echo "RUNNING SYSTEM TESTS:"
        echo "======================================================"
        echo

        if [ -n "${{ env.NAMESPACE }}" ]; then
          kubectl get pods -A --kubeconfig ../kube/${{ env.NAMESPACE }}-config | awk '$5>0' |  awk '$2 ~ /.*miner|sharder|blobber|validator|authorizer|zbox|zdns|NAME|RESTARTS.*/' | awk {'print $2" " $5'} | column -t > pod_status_pre_test_run.txt
        fi


        GOPATH=$(echo $(go env GOPATH))

        cd tests/cli_tests
        system_tests_exit_code=0
        echo "Sequential tests are currently running.... It will take a few minutes for initial test output to appear..."
        echo
        ${GOPATH}/bin/gotestsum --jsonfile test-output.json --hide-summary=output --format testname ${{ env.SHOULD_RETRY_FAILURES }} --raw-command -- ../../TEST_RUNNER_COMMAND.sh || system_tests_exit_code=$?
        cat test-output.json | ${GOPATH}/bin/go-test-report --groupSize 1 --output ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/cli/index.html --title "0Chain System test suite [${{ env.BRANCH_DIR }}/${GITHUB_SHA:0:8}] ran against [${{ env.NETWORK_URL }}] at [${{ env.TEST_TIME }}]"

        cp -R ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/cli ../../${{ env.BRANCH_DIR }}/latest/
        echo "TESTS_RAN=true" >> $GITHUB_ENV

        if [[ $system_tests_exit_code == 0 ]];
          then
            echo TESTS_PASSED=true >> $GITHUB_ENV
          else
            echo TESTS_PASSED=false >> $GITHUB_ENV
            echo "::error title=System tests faled!::System tests failed. Ensure tests are running against the correct images/branches and rule out any possible code issues before attempting a re-run"
        fi

        exit $system_tests_exit_code

    - name: "Run subset of CLI System Tests"
      if:  ${{ env.RUN_SUBSET_OF_TESTS == 'true' }}
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        if [ -n "${{ env.NAMESPACE }}" ]; then
          kubectl get pods -A --kubeconfig ../kube/${{ env.NAMESPACE }}-config | awk '$5>0' |  awk '$2 ~ /.*miner|sharder|blobber|validator|authorizer|zbox|zdns|NAME|RESTARTS.*/' | awk {'print $2" " $5'} | column -t > pod_status_pre_test_run.txt
        fi

        cd tests/cli_tests

        testFiles=$(echo ${{ inputs.test_file_filter }} | sed 's/,/ /g')
        echo "Attempting to resolve filter to test files..."
        ls $(echo $testFiles)

        fileListResult="$?"

        if [ "$fileListResult" != "0" ];
          then
            echo "::error title=Test files do not exist!::One or more of the test files requested [$testFiles] could not be found" && exit 1
          else
            echo "SUCCESS!"
        fi

        testFunctions=$(grep -o '^[^\/]*func Test.*' $(echo $testFiles) | sed 's/^[^/]*func \(Test[A-Za-z0-9_]*\).*$/\1/' | paste -sd "|" -)

        if [ -z "$testFunctions" ];
          then
            echo "::error title=Test functions not found!::No test functions found in any of the test files requested [$testFiles]" && exit 1
        fi

        printf '#!/bin/bash\nset -o pipefail\n[ -z "$1" ] && TESTS_TO_RUN="-run  '$testFunctions' ./..." || TESTS_TO_RUN=$1\nCONFIG_PATH=./zbox_config.yaml go test -timeout=60m $TESTS_TO_RUN -json -count=1 | sed -r "/(=== (CONT|RUN|PAUSE).*)|(--- FAIL:.*)|(\\"Test\\":\\".*\/[pP]arallel\\")/d"' > SUBSET_TEST_RUNNER_COMMAND.sh && chmod 777 SUBSET_TEST_RUNNER_COMMAND.sh

        echo
        echo "======================================================"
        echo "RUNNING [$(echo $testFunctions | awk '{ print toupper($0) }')] SYSTEM TESTS"
        echo "======================================================"
        echo

        system_tests_exit_code=0
        GOPATH=$(echo $(go env GOPATH))
        ${GOPATH}/bin/gotestsum --jsonfile test-output.json --hide-summary=output --format testname ${{ env.SHOULD_RETRY_FAILURES }} --raw-command -- ./SUBSET_TEST_RUNNER_COMMAND.sh || system_tests_exit_code=$?
        cat test-output.json | ${GOPATH}/bin/go-test-report --groupSize 1 --output ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/cli/index.html --title "Subset of 0Chain System test suite [${{ env.BRANCH_DIR }}/${GITHUB_SHA:0:8}] ran against [${{ env.NETWORK_URL }}] at [${{ env.TEST_TIME }}]"

        cp -R ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/cli ../../${{ env.BRANCH_DIR }}/latest/
        echo "TESTS_RAN=true" >> $GITHUB_ENV

        if [[ $system_tests_exit_code == 0 ]];
          then
            echo TESTS_PASSED=true >> $GITHUB_ENV
          else
            echo TESTS_PASSED=false >> $GITHUB_ENV
            echo "::error title=System tests faled!::System tests failed. Ensure tests are running against the correct images/branches and rule out any possible code issues before attempting a re-run"
        fi

        exit $system_tests_exit_code

    - name: "Archive CLI Config & Console Output"
      if: ${{ always() && env.TESTS_RAN == 'true' && inputs.archive_results == 'true' }}
      uses: actions/upload-artifact@v3
      with:
        name: System-Test-${{ env.TEST_TIME }}
        path: |
          ./tests/cli_tests/config
          ./tests/cli_tests/cmdlog.log
          ./${{ env.BRANCH_DIR }}/latest/cli/index.html

    - name: "Run Tokenomics System Tests"
      shell: 'script --return --quiet --command "bash {0}"'
      if:  ${{ env.RUN_TOKENOMICS_SYSTEM_TESTS == 'true' && env.RUN_SUBSET_OF_TESTS == 'false' }}
      run: |
        echo
        echo "======================================================"
        echo "RUNNING TOKENOMICS SYSTEM TESTS:"
        echo "======================================================"
        echo

        cd tests/tokenomics_tests
        tokenomics_system_tests_exit_code=0
        GOPATH=$(echo $(go env GOPATH))
        ${GOPATH}/bin/gotestsum --jsonfile test-output.json --hide-summary=output --format testname ${{ env.SHOULD_RETRY_FAILURES }} --raw-command -- ../../TOKENOMICS_TEST_RUNNER_COMMAND.sh || tokenomics_system_tests_exit_code=$?
        cat test-output.json | ${GOPATH}/bin/go-test-report --groupSize 1 --output ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/tokenomics/index.html --title "0Chain Tokenomics System test suite [${{ env.BRANCH_DIR }}/${GITHUB_SHA:0:8}] ran against [${{ env.NETWORK_URL }}] at [${{ env.TEST_TIME }}]"

        cp -R ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/tokenomics ../../${{ env.BRANCH_DIR }}/latest/
        if [[ $tokenomics_system_tests_exit_code == 0 ]];
          then
            echo TOKENOMICS_TESTS_PASSED=true >> $GITHUB_ENV
          else
            echo TOKENOMICS_TESTS_PASSED=false >> $GITHUB_ENV
            echo "::error title=Tokenomics System tests faled!::Tokenomics System tests failed. Ensure tests are running against the correct images/branches and rule out any possible code issues before attempting a re-run"
        fi

        exit $tokenomics_system_tests_exit_code

    - name: "Archive Tokenomics Test Config & Console Output"
      if: ${{ always() && env.RUN_TOKENOMICS_SYSTEM_TESTS == 'true' && env.RUN_SUBSET_OF_TESTS == 'false' }}
      uses: actions/upload-artifact@v3
      with:
        name: Tokenomics-System-Test-${{ env.TEST_TIME }}
        path: |
          ./tests/tokenomics_tests/config
          ./${{ env.BRANCH_DIR }}/latest/tokenomics/index.html

    - name: "System Stability Check"
      if: ${{ always() && env.TESTS_RAN == 'true' }}
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        if [ -n "${{ env.NAMESPACE }}" ];
          then
            kubectl get pods -A --kubeconfig ../kube/${{ env.NAMESPACE }}-config | awk '$5>0' |  awk '$2 ~ /.*miner|sharder|blobber|validator|authorizer|zbox|zdns|NAME|RESTARTS.*/' | awk {'print $2" " $5'} | column -t > pod_status_post_test_run.txt
            echo "Pod status pre test run (some restarts are normal as the network stabilises):"
            cat pod_status_pre_test_run.txt
            echo "Pod status post test run (no further restarts should have taken place for the network to be considered stable):"
            cat pod_status_post_test_run.txt

            if [[ "$(cat pod_status_pre_test_run.txt | md5sum)" == "$(cat pod_status_post_test_run.txt | md5sum)" ]];
              then
                echo "0Chain did not crash during system tests"
                echo PODS_CRASHED=false >> $GITHUB_ENV
              else
                echo PODS_CRASHED=true >> $GITHUB_ENV
                echo TESTS_PASSED=false >> $GITHUB_ENV
                echo "::error title=0Chain crashed during test run!::One or more 0Chain components (listed below) crashed during the test run, therefore the build is NOT STABLE"
                comm -1 -3 pod_status_pre_test_run.txt pod_status_post_test_run.txt
                exit 1
            fi
          else
            echo "NOT preforming system stability check because network was not deployed as part of this test run"
        fi

    - name: "Run Flaky CLI System Tests"
      if:  ${{ env.TESTS_PASSED == 'true' && inputs.run_flaky_tests == 'true' }}
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo
        echo "======================================================"
        echo "RUNNING FLAKY SYSTEM TESTS:"
        echo "======================================================"
        echo

        GOPATH=$(echo $(go env GOPATH))
        
        cd tests/cli_tests
        rm -rf cmdlog.log || true
        rm -rf test-output.json || true
        ${GOPATH}/bin/gotestsum --jsonfile test-output.json --hide-summary=output --format testname --raw-command -- ../../FLAKY_TEST_RUNNER_COMMAND.sh || true
        cat test-output.json | ${GOPATH}/bin/go-test-report --groupSize 1 --output ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/flaky_cli/index.html --title "0Chain Flaky system test suite [${{ env.BRANCH_DIR }}/${GITHUB_SHA:0:8}] ran against [${{ env.NETWORK_URL }}] at [${{ env.TEST_TIME }}]"
        cp -R ../../${{ env.BRANCH_DIR }}/${GITHUB_SHA}/flaky_cli ../../${{ env.BRANCH_DIR }}/latest/
        echo "FLAKY_TESTS_RAN=true" >> $GITHUB_ENV

    - name: "Archive Flaky Test CLI Config & Console Output"
      if: ${{ always() && env.FLAKY_TESTS_RAN == 'true' && inputs.archive_results  == 'true'}}
      uses: actions/upload-artifact@v3
      with:
        name: Flaky-System-Test-${{ env.TEST_TIME }}
        path: |
          ./tests/cli_tests/config
          ./tests/cli_tests/cmdlog.log
          ./${{ env.BRANCH_DIR }}/latest/flaky_cli/index.html


    - name: "Extract Logging From Pods"
      if: ${{ failure() && env.NAMESPACE != '' }}
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo
        echo "======================================================"
        echo "Extracting Logging From Pods:"
        echo "======================================================"

        echo '#!/bin/bash
        app=$1
        output=$2

        Green="\033[0;32m"

        podname=$(kubectl -n ${{ env.NAMESPACE }} --kubeconfig ../kube/${{ env.NAMESPACE }}-config get pods --no-headers -l app=$app -o custom-columns=:metadata.name)

        echo -ne "$Green [+] $app:$podname "
        kubectl -n ${{ env.NAMESPACE }} --kubeconfig ../kube/${{ env.NAMESPACE }}-config cp $podname:log $output && echo "OK"


        kubectl -n ${{ env.NAMESPACE }} --kubeconfig ../kube/${{ env.NAMESPACE }}-config get events --sort-by='.metadata.creationTimestamp' | grep $podname
        ' > ./logging.sh

        chmod 777 ./logging.sh;

        echo "-----------------------------"
        echo "> Show blobbers"
        echo "-----------------------------"
        cd tests/cli_tests
        ./zbox --configDir ./config --config ./zbox_config.yaml --wallet ../ignore ls-blobbers --all
        cd ../..

        echo "-----------------------------"
        echo "> Show pods"
        echo "-----------------------------"
        kubectl -n ${{ env.NAMESPACE }} --kubeconfig ../kube/${{ env.NAMESPACE }}-config get pods

        echo "-----------------------------"
        echo "> Extract logs"
        echo "-----------------------------"
        ./logging.sh 0chain-sharder-01 ./logs/sharder-01
        ./logging.sh 0chain-sharder-02 ./logs/sharder-02

        echo
        ./logging.sh 0chain-miner-01 ./logs/miner-01
        ./logging.sh 0chain-miner-02 ./logs/miner-02
        ./logging.sh 0chain-miner-03 ./logs/miner-03

        echo
        ./logging.sh blobber-blobber-01 ./logs/blobber-01
        ./logging.sh blobber-blobber-02 ./logs/blobber-02
        ./logging.sh blobber-blobber-03 ./logs/blobber-03
        ./logging.sh blobber-blobber-04 ./logs/blobber-04
        ./logging.sh blobber-blobber-05 ./logs/blobber-05
        ./logging.sh blobber-blobber-06 ./logs/blobber-06

        echo
        ./logging.sh blobber-validator-01 ./logs/validator-01
        ./logging.sh blobber-validator-02 ./logs/validator-02
        ./logging.sh blobber-validator-03 ./logs/validator-03
        ./logging.sh blobber-validator-04 ./logs/validator-04
        ./logging.sh blobber-validator-05 ./logs/validator-05
        ./logging.sh blobber-validator-06 ./logs/validator-06

    - name: "Archive Sharder Logging"
      if: ${{ failure() && env.NAMESPACE != '' }}
      uses: actions/upload-artifact@v3
      with:
        name: logging-pods-tests-sharder
        path: |
          ./logs/sharder-01
          ./logs/sharder-02
        retention-days: 5
    - name: "Archive Miner Logging"
      if: ${{ failure() && env.NAMESPACE != '' }}
      uses: actions/upload-artifact@v3
      with:
        name: logging-pods-tests-miner
        path: |
          ./logs/miner-01
          ./logs/miner-02
          ./logs/miner-03
        retention-days: 5

    - name: "Archive Blobber Logging"
      if: ${{ failure() && env.NAMESPACE != '' }}
      uses: actions/upload-artifact@v3
      with:
        name: logging-pods-tests-blobber
        path: |
          ./logs/blobber-01
          ./logs/blobber-01
          ./logs/blobber-03
          ./logs/blobber-04
          ./logs/blobber-05
          ./logs/blobber-06
        retention-days: 5

    - name: "Archive Validator Logging"
      if: ${{ failure() && env.NAMESPACE != '' }}
      uses: actions/upload-artifact@v3
      with:
        name: logging-pods-tests-validator
        path: |
          ./logs/validator-01
          ./logs/validator-01
          ./logs/validator-03
          ./logs/validator-04
          ./logs/validator-05
          ./logs/validator-06
        retention-days: 5

    - name: "Deploy report pages"
      if: ${{ always() && env.TESTS_RAN == 'true' && inputs.deploy_report_page == 'true' }}
      uses: peaceiris/actions-gh-pages@v3
      with:
        publish_branch: test_reports
        keep_files: true
        github_token: "${{ inputs.svc_account_secret }}"
        publish_dir: "./${{ env.BRANCH_DIR }}"
        destination_dir: "./${{ env.BRANCH_DIR }}"
        user_name: "github-actions[bot]"
        user_email: "github-actions[bot]@users.noreply.github.com"

    - name: "Wait for report deployment to complete"
      if: ${{ always() && env.TESTS_RAN == 'true' && inputs.deploy_report_page == 'true' }}
      shell: 'script --return --quiet --command "bash {0}"'
      run: counter=0; while [ $counter -lt 5 ] && curl -o /dev/null -Isw '%{http_code}\n' "https://0chain.github.io/${{ github.event.repository.name }}/${{ env.BRANCH_DIR }}/${GITHUB_SHA}/cli/index.html?t=$(date +%s)" | grep -v 200 > /dev/null; do sleep 10 && echo "Waiting for report page to deploy..." && ((counter=counter+1)); done

    - name: "Report Links"
      if: ${{ always() && env.TESTS_RAN == 'true' && inputs.deploy_report_page == 'true' }}
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo
        echo "======================================================"
        echo "SYSTEM TESTS HTML REPORTS:"
        echo "======================================================"
        echo
        echo "::notice title=System tests report::System tests report: https://0chain.github.io/${{ github.event.repository.name }}/${{ env.BRANCH_DIR }}/${GITHUB_SHA}/cli/index.html"
        echo "::notice title=API System tests report::API System tests report: https://0chain.github.io/${{ github.event.repository.name }}/${{ env.BRANCH_DIR }}/${GITHUB_SHA}/api/index.html"
        if [ "${{ env.FLAKY_TESTS_RAN }}" == "true" ];
           then
              echo "::notice title=Flaky system tests report::Flaky system tests report: https://0chain.github.io/${{ github.event.repository.name }}/${{ env.BRANCH_DIR }}/${GITHUB_SHA}/flaky_cli/index.html"
        fi

    - name: "Notify Slack"
      if: ${{ failure() && github.ref == 'refs/heads/staging' && github.event_name != 'workflow_dispatch' && github.event.repository.name != 'system_test' }}
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        curl -X POST -H "Content-type: application/json" --data "{\"text\":\"<!here> System tests FAILED on ${{ github.event.repository.name }} ${GITHUB_REF#refs/*/} after merge by ${{ github.actor }}. Please investigae! Test results are here: https://github.com/0chain/${{ github.event.repository.name }}/actions/runs/${{ github.run_id }}\"}" ${{ inputs.DEVOPS_CHANNEL_WEBHOOK_URL }}
