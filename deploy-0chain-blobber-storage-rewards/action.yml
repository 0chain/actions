name: "Deploy 0Chain Network"
description: "Deploy 0Chain Network to k8s cluster using helm"
inputs:
  kube_config:
    description: 'cluster details'
    required: true
  miner_image:
    description: 'miner DOCKER IMAGE to deploy'
    default: 'staging'
    required: false
  sharder_image:
    description: 'sharder DOCKER IMAGE to deploy'
    default: 'staging'
    required: false
  blobber_image:
    description: 'blobber DOCKER IMAGE to deploy'
    default: 'staging'
    required: false
  validator_image:
    description: 'validator DOCKER IMAGE to deploy'
    default: 'staging'
    required: false
  authorizer_image:
    description: 'authorizer DOCKER IMAGE to deploy'
    default: 'staging'
    required: false
  zbox_image:
    description: '0box DOCKER IMAGE to deploy'
    default: 'staging'
    required: false
  zblock_image:
    description: '0block DOCKER IMAGE to deploy'
    default: 'staging'
    required: false
  zdns_image:
    description: '0dns DOCKER IMAGE to deploy'
    default: 'staging'
    required: false
  explorer_image:
    description: 'Explorer DOCKER IMAGE to deploy'
    default: 'latest'
    required: false
  zsearch_image:
    description: '0Search DOCKER IMAGE to deploy'
    default: 'staging'
    required: false
  teardown_condition:
    description: 'Variable on which to teardown network'
    default: 'ALWAYS_TEARDOWN'
    required: false
  miner_fee:
    description: 'Miner fee per transaction'
    default: '0'
    required: false
  zbox_cli_branch:
    required: true
    description: '0Box CLI (branch or commit SHA) which the tests will use'
    default: 'staging'
  zwallet_cli_branch:
    required: true
    description: '0Wallet CLI (branch or commit SHA) which the tests will use'
    default: 'staging'
  custom_go_sdk_version:
    required: true
    default: "NONE"
    description: 'custom gosdk version. Will upgrade CLI branches with this before running tests'

runs:
  using: "composite"
  steps:
    - name: "Setup Config"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |       
        echo "ACTIONS_BRANCH=$(cd ../../_actions/0chain/actions/ && find . -name .github | grep -o -P '(?<=./).*(?=/.github)')" >> $GITHUB_ENV
        echo "NETWORK_URL=$(echo dev-${RUNNER_NAME:(-1)}.devnet-0chain.net)" >> $GITHUB_ENV
        echo "MINER_TAG=$(echo '${{inputs.miner_image}}')" >> $GITHUB_ENV
        echo "SHARDER_TAG=$(echo '${{inputs.sharder_image}}')" >> $GITHUB_ENV
        echo "BLOBBER_TAG=$(echo '${{inputs.blobber_image}}')" >> $GITHUB_ENV
        echo "VALIDATOR_TAG=$(echo '${{inputs.validator_image}}')" >> $GITHUB_ENV
        echo "AUTHORIZER_TAG=$(echo '${{inputs.authorizer_image}}')" >> $GITHUB_ENV
        echo "ZBOX_TAG=$(echo '${{inputs.zbox_image}}')" >> $GITHUB_ENV
        echo "ZDNS_TAG=$(echo '${{inputs.zdns_image}}')" >> $GITHUB_ENV
        echo "ZBLOCK_TAG=$(echo '${{inputs.zblock_image}}')" >> $GITHUB_ENV
        echo "EXPLORER_TAG=$(echo '${{inputs.explorer_image}}')" >> $GITHUB_ENV
        echo "ZSEARCH_TAG=$(echo '${{inputs.zsearch_image}}')" >> $GITHUB_ENV
        ALWAYS_TEARDOWN=true
        echo "TEARDOWN_CONDITION=${{inputs.teardown_condition}}" >> $GITHUB_ENV
        echo "MINER_FEE=${{inputs.miner_fee}}" >> $GITHUB_ENV
        echo "ZBOX_BRANCH=$(echo ${{inputs.zbox_cli_branch}})" >> $GITHUB_ENV
        echo "ZWALLET_BRANCH=$(echo ${{inputs.zwallet_cli_branch}})" >> $GITHUB_ENV

        echo "RUNNER_NUMBER=${RUNNER_NAME:(-1)}" >> $GITHUB_ENV
        echo "NAMESPACE=dev-${RUNNER_NAME:(-1)}" >> $GITHUB_ENV

    - name: "VIEW DEPLOY CONFIGURATION"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo
        echo "=================================================="
        echo "DEPLOYING 0CHAIN WITH THE FOLLOWING CONFIGURATION:"
        echo "=================================================="
        echo
        echo "0Chain network URL:      [${{ env.NETWORK_URL }}]"
        echo "Miner docker image:      [${{ env.MINER_TAG }}]"
        echo "Sharder docker image:    [${{ env.SHARDER_TAG }}]"
        echo "Blobber docker image:    [${{ env.BLOBBER_TAG }}]"
        echo "Validator docker image:  [${{ env.VALIDATOR_TAG }}]"
        echo "Authorizer docker image: [${{ env.AUTHORIZER_TAG }}]"
        echo "0box docker image:       [${{ env.ZBOX_TAG }}]"
        echo "0dns docker image:       [${{ env.ZDNS_TAG }}]"
        echo "0block docker image:     [${{ env.ZBLOCK_TAG }}]"
        echo "0Search docker image:    [${{ env.ZSEARCH_TAG }}]"
        echo "Explorer docker image:   [${{ env.EXPLORER_TAG }}]"

    - name: "Install helm"
      uses: azure/setup-helm@v1
      with:
        version: 'v3.2.2'

    - name: "Install kubectl"
      uses: azure/setup-kubectl@v1
      id: install

    - name: "Configure helm & kubectl"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo
        echo "=================================================="
        echo "CONFIGURING HELM"
        echo "=================================================="
        echo
        cd ..
        helm repo remove 0chain-helm
        helm repo add 0chain-helm http://0chain-helm-chart.s3-website.us-east-2.amazonaws.com/dev/
        helm repo update
        mkdir -p ./kube
        echo "${{ inputs.kube_config }}" | xargs | base64 -d > ./kube/${{ env.NAMESPACE }}-config

    - name: "Remove existing 0Chain network and data"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        cd ..
        echo '#!/bin/bash
        echo
        echo "=================================================="
        echo "REMOVING EXISTING 0CHAIN NETWORK"
        echo "=================================================="
        echo

        output=$(helm list -n ${{ env.NAMESPACE }} --kubeconfig "./kube/${{ env.NAMESPACE }}-config" -a | wc -l);
        if [ $output -gt 1 ]; then
            helm list --short -n ${{ env.NAMESPACE }} --kubeconfig "./kube/${{ env.NAMESPACE }}-config" -a | xargs -L1 helm delete -n ${{ env.NAMESPACE }} --kubeconfig "./kube/${{ env.NAMESPACE }}-config"
            sleep 30
        fi
            helm upgrade --install --wait --timeout 120s cleanup -n ${{ env.NAMESPACE }} 0chain-helm/cleanDir --kubeconfig ./kube/${{ env.NAMESPACE }}-config
            kubectl wait --for=condition=complete --timeout 900s job/helm-clean-directory -n ${{ env.NAMESPACE }} --kubeconfig ./kube/${{ env.NAMESPACE }}-config
            kubectl delete all --all -n ${{ env.NAMESPACE }} --kubeconfig ./kube/${{ env.NAMESPACE }}-config
        ' > ./teardown.sh;
        chmod 777 ./teardown.sh;
        ./teardown.sh

    - name: "Deploy 0Chain network"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        cd ..

        echo '#!/bin/bash
        sed -ri s/dev-./${{ env.NAMESPACE }}/ ../_actions/0chain/actions/${{ env.ACTIONS_BRANCH }}/values/test/$1.yaml
        kubectl -n ${{ env.NAMESPACE }} --kubeconfig ./kube/${{ env.NAMESPACE }}-config delete configmap $1
        kubectl -n ${{ env.NAMESPACE }} --kubeconfig ./kube/${{ env.NAMESPACE }}-config apply -f ../_actions/0chain/actions/${{ env.ACTIONS_BRANCH }}/values/test/$1.yaml
        ' > ./add-configmap.sh;
        chmod 777 ./add-configmap.sh;

        echo '#!/bin/bash
        echo
        echo "=================================================="
        echo "DEPLOYING 0CHAIN NETWORK"
        echo "=================================================="
        echo

        ./add-configmap.sh magicblock
        ./add-configmap.sh b0mnode01-keys
        ./add-configmap.sh b0mnode01-dkg
        ./add-configmap.sh b0mnode02-keys
        ./add-configmap.sh b0mnode02-dkg
        ./add-configmap.sh b0mnode03-keys
        ./add-configmap.sh b0mnode03-dkg
        ./add-configmap.sh b0snode01-keys
        ./add-configmap.sh b0snode02-keys
        ./add-configmap.sh initial-state
        ./add-configmap.sh delegate-wallet-json
        ./add-configmap.sh nodes
        helm upgrade --install 0chain --wait --timeout 10m 0chain-helm/zchainDel --set commonConf.sc.smart_contracts.storagesc.block_reward.blobber_ratio=0 --set sharder.hostName=${{ env.NAMESPACE }} --set sharder.host=devnet-0chain.net --set sharder.image.tag=${{ env.SHARDER_TAG }} --set commonConf.zchainDown.number_of_delegates=20 --set sharder.config.zchain01.delegate_wallet="b888ae3400b67a47362aad7d6263fcfeb6585fe696e8d182d3bb4f4a9d737bae" --set sharder.config.zchain02.delegate_wallet="b3e3f587dd65aaf4118adf87878a138dbb3163a3b169a0d1872aa9a7a0fa5c50" --set miner.config.zchain01.delegate_wallet="9636ab821fd93a37740ab4c6a27d9e2cf3a4072b4bc8fd1c6048f9c3ef9cf2a8" --set miner.config.zchain02.delegate_wallet="b8b25d509afbe8f68f1342a2fa719acf312915a6f5a5bb0918cad6598e01325f" --set miner.config.zchain03.delegate_wallet="bbe8b6abdb54b0642324a103c49f8b04e2623db74cd7f1427cd2d5f0308e674d" --set commonConf.zchainUp.server_chain.transaction.timeout=600 --set miner.hostName=${{ env.NAMESPACE }} --set miner.host=devnet-0chain.net --set miner.image.tag=${{ env.MINER_TAG }} --set commonConf.zchainUp.server_chain.transaction.min_fee=${{ env.MINER_FEE }} --set commonConf.zchainUp.server_chain.dkg=true --set commonConf.zchainUp.server_chain.view_change=false --set commonConf.zchainUp.server_chain.state.enabled=true --set commonConf.zchainUp.server_chain.block_rewards=true --set commonConf.zchainUp.server_chain.smart_contract.storage=true --set commonConf.zchainUp.server_chain.smart_contract.faucet=true --set commonConf.zchainUp.server_chain.smart_contract.interest=true --set commonConf.zchainUp.server_chain.smart_contract.miner=true --set commonConf.zchainUp.server_chain.smart_contract.multisig=true --set commonConf.zchainUp.server_chain.smart_contract.vesting=true --set commonConf.zchainUp.server_chain.smart_contract.zcn=true --set commonConf.zchainUp.server_chain.smart_contract.setting_update_period=2 --set commonConf.sc.smart_contracts.minersc.num_miner_delegates_rewarded=10 --set commonConf.sc.smart_contracts.minersc.num_sharders_rewarded=5 --set commonConf.zchainUp.server_chain.dbs.settings.debug=true --set commonConf.zchainUp.server_chain.dbs.settings.aggregate_period=10 --set commonConf.zchainUp.server_chain.dbs.settings.page_limit=50  --set commonConf.sc.smart_contracts.minersc.num_sharder_delegates_rewarded=1 --set commonConf.sc.smart_contracts.storagesc.min_alloc_duration="2s" -n ${{ env.NAMESPACE }} --kubeconfig ./kube/${{ env.NAMESPACE }}-config
        helm upgrade --install 0dns --wait --timeout 60s --set zdns.image.tag=${{ env.ZDNS_TAG }} --set zdns.hostName=${{ env.NAMESPACE }} --set zdns.host=devnet-0chain.net -n ${{ env.NAMESPACE }}  0chain-helm/zdns --kubeconfig ./kube/${{ env.NAMESPACE }}-config
        helm upgrade --install blobber --wait --set blobber.blobberCount=2 --set validator.validatorCount=2 --set blobber.config.read_price=0.01 --set blobber.config.price_in_usd="false" --set blobber.config.block_worker=https://${{ env.NAMESPACE }}.devnet-0chain.net/dns --set validator.config.block_worker=https://${{ env.NAMESPACE }}.devnet-0chain.net/dns --set blobber.config.delegate_wallet=591d6d0d5642bdbc924756ca2647b4b59adce0acd02a487ecc4d1bd4669293a8 --set validator.config.delegate_wallet=591d6d0d5642bdbc924756ca2647b4b59adce0acd02a487ecc4d1bd4669293a8 --set blobber.hostName=${{ env.NAMESPACE }} --set blobber.host=devnet-0chain.net --set blobber.image.tag=${{ env.BLOBBER_TAG }} --set validator.image.tag=${{ env.VALIDATOR_TAG }} --set validator.hostName=${{ env.NAMESPACE }} --set validator.host=devnet-0chain.net -n ${{ env.NAMESPACE }}  0chain-helm/blobber --kubeconfig ./kube/${{ env.NAMESPACE }}-config
        helm upgrade --install 0block --set zblock.hostName=${{ env.NAMESPACE }} --set zblock.host=devnet-0chain.net --set zblock.image.tag=${{ env.ZBLOCK_TAG }} -n ${{ env.NAMESPACE }}  0chain-helm/zblock --kubeconfig ./kube/${{ env.NAMESPACE }}-config
        helm upgrade --install explorer --set explorer.config.blockWorker=https://${{ env.NAMESPACE }}.devnet-0chain.net/dns --set explorer.hostName=${{ env.NAMESPACE }} --set explorer.image.tag=${{ env.EXPLORER_TAG }} --set explorer.host=devnet-0chain.net -n ${{ env.NAMESPACE }}  0chain-helm/explorer --kubeconfig ./kube/${{ env.NAMESPACE }}-config
        helm upgrade --install 0box --wait --set zbox.hostName=${{ env.NAMESPACE }} --set zbox.host=devnet-0chain.net --set zbox.config.host=https://${{ env.NAMESPACE }}.devnet-0chain.net/ --set zbox.config.block_worker=https://${{ env.NAMESPACE }}.devnet-0chain.net/dns --set zbox.image.tag=${{ env.ZBOX_TAG }} -n ${{ env.NAMESPACE }}  0chain-helm/zbox --kubeconfig ./kube/${{ env.NAMESPACE }}-config
        helm upgrade --install 0search --set zsearch.hostName=${{ env.NAMESPACE }} --set zsearch.host=devnet-0chain.net --set zsearch.image.tag=${{ env.ZSEARCH_TAG }} -n ${{ env.NAMESPACE }}  0chain-helm/zsearch --kubeconfig ./kube/${{ env.NAMESPACE }}-config
        helm upgrade --install authorizer -n ${{ env.NAMESPACE }} --set authorizer.authorizerCount=3 --set authorizer.hostName=${{ env.NAMESPACE }} --set authorizer.host=devnet-0chain.net --set authorizer.image.tag=${{ env.AUTHORIZER_TAG }} --set authorizer.config.config_yaml.block_worker=https://${{ env.NAMESPACE }}.devnet-0chain.net/dns 0chain-helm/authorizer --kubeconfig ./kube/${{ env.NAMESPACE }}-config
        ' > ./deploy.sh;
        chmod 777 ./deploy.sh;
        ./deploy.sh

    - name: "Checkout 0wallet CLI"
      uses: actions/checkout@v3
      with:
        ref: ${{ env.ZWALLET_BRANCH }}
        repository: 0chain/zwalletcli
        fetch-depth: 1
        path: ./zwalletcli

    - name: "Checkout 0box CLI"
      uses: actions/checkout@v3
      with:
        ref: ${{ env.ZBOX_BRANCH }}
        repository: 0chain/zboxcli
        fetch-depth: 1
        path: ./zboxcli

    - name: "Setup Go"
      uses: actions/setup-go@v3
      with:
        go-version: 1.18

    - name: "Build CLI Binaries"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo
        echo "======================================================"
        echo "BUILDING 0WALLET AND 0BOX CLI BINARIES:"
        echo "======================================================"
        echo
        echo "Building zwalletcli [${{ env.ZWALLET_BRANCH }}]..."
        cd zwalletcli
        export GOPATH="/root/actions-runner${RUNNER_NAME:(-1)}/_work/_tool/go"
        export GOMODCACHE="/root/actions-runner${RUNNER_NAME:(-1)}/_work/_tool/go/pkg/mod"
        export GOCACHE="/root/actions-runner${RUNNER_NAME:(-1)}/_work/_tool/.cache/go-build"
        if [[ -n "${{ inputs.custom_go_sdk_version }}" && "${{ inputs.custom_go_sdk_version }}" != "NONE" ]];
        then
          echo "Upgrading zwalletcli to GOSDK [${{ inputs.custom_go_sdk_version }}]"
          go get github.com/0chain/gosdk@${{ inputs.custom_go_sdk_version }} || { echo "::error title=Failed to retrieve gosdk::failed to retrieve gosdk [${{ inputs.custom_go_sdk_version }}]" && exit 1; }
          go mod tidy || { echo "::error title=Failed to upgrade gosdk on zwallet CLI::failed to upgrade zwallet CLI gosdk to [${{ inputs.custom_go_sdk_version }}]" && exit 1; }
        fi
        make install > build.log 2>&1 || { cat build.log && echo "::error title=zwallet CLI build failed::zwallet CLI build failed" && exit 1; }
        mv zwallet ..
        echo "Building zboxcli [${{ env.ZBOX_BRANCH }}]..."
        cd ../zboxcli
        if [[ -n "${{ inputs.custom_go_sdk_version }}" && "${{ inputs.custom_go_sdk_version }}" != "NONE" ]];
        then
          echo "Upgrading zboxcli to GOSDK [${{ inputs.custom_go_sdk_version }}]"
          go get github.com/0chain/gosdk@${{ inputs.custom_go_sdk_version }} || { echo "::error title=Failed to retrieve gosdk::failed to retrieve gosdk [${{ inputs.custom_go_sdk_version }}]" && exit 1; }
          go mod tidy || { echo "::error title=Failed to upgrade gosdk on zbox CLI::failed to upgrade zbox CLI gosdk to [${{ inputs.custom_go_sdk_version }}]" && exit 1; }
        fi
        make install > build.log 2>&1 || { cat build.log && echo "::error title=zbox CLI build failed::zbox CLI build failed" && exit 1; }
        mv zbox ..
        echo "CLI build SUCCESS!"

    - name: "Health Check"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo
        echo "======================================================"
        echo "HEALTH CHECK NETWORK COMPONENTS:"
        echo "======================================================"
        echo
        echo '#!/bin/bash
        success=0
        Green="\033[0;32m"
        Color_Off="\033[0m"
        for i in 1..60
        do
            echo "checking health: $2 "
            curl -s https://$1/$2 > build.log && echo -e "[$Green $2 OK $Color_Off]" && success=1 && break || sleep 10
        done
        if [ "$success" -ne "1" ]; 
        then 
            echo "$2 not healthy.. Exiting..."
            exit 0;
        fi
        ' > check_health.sh
        chmod 777 ./check_health.sh;
        ./check_health.sh ${{ env.NETWORK_URL }} "sharder01/"
        ./check_health.sh ${{ env.NETWORK_URL }} "sharder02/"
        ./check_health.sh ${{ env.NETWORK_URL }} "miner01/"
        ./check_health.sh ${{ env.NETWORK_URL }} "miner02/"
        ./check_health.sh ${{ env.NETWORK_URL }} "miner03/"
        ./check_health.sh ${{ env.NETWORK_URL }} "blobber01/"
        ./check_health.sh ${{ env.NETWORK_URL }} "blobber02/"

    - name: "Stake blobbers using above built binaries"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo 'block_worker: https://${{ env.NETWORK_URL }}/dns
        signature_scheme: bls0chain
        min_submit: 50 # in percentage
        min_confirmation: 50 # in percentage
        confirmation_chain_length: 3
        ethereum_node_url: https://goerli.infura.io/v3/773bfe30452f40f998e5d0f2f8a29888
        authorizers_address: 0xB132C20A02AD7C38d88805F0e3fFDdfb54224C58
        bridge_address: 0x2405e40161ea6da91AE0e95061e7A8462b4D5eEa
        token_address: 0x10140fbca3a468A1c35F132D75659eF0EB5d95DB
        store_unlock_duration_sec: 2
        ' > zbox_config.yaml

        echo "==========================================================="
        echo "SHOW BLOBBERS LIST"
        echo "==========================================================="
        ./zbox --configDir . --config ./zbox_config.yaml --wallet ../ignore ls-blobbers --all

        echo '#!/bin/bash
        echo
        echo "==========================================================="
        echo "STAKING BLOBBERS USING ZWALLETCLI & ZBOXCLI BINARIES"
        echo "==========================================================="
        echo
        exec 6>&1 # Save stdout to file descriptor 6
        function retry {
            local n=1
            local max=3
            local delay=5
            while true; do
            "$@" && break || {
                if [[ $n -lt $max ]]; then
                    ((n++))
                    echo "Command failed. Attempt $n/$max:"
                    sleep $delay;
                else
                    exec 1>&6 6>&- # Revert output to stdout instead of build.log and close file descriptor 6
                    echo "failed to run $@"
                    cat build.log && echo "::error title=Failed to stake the blobbers";
                    echo "exiting blobber stake process..."
                    exit 1
                fi
            }
            done
        }
        export HOME="/root"
        retry ./zwallet register --configDir . --config ./zbox_config.yaml --wallet ../ignore > build.log 2>&1
        for i in {1..12}
        do
            retry ./zwallet faucet --methodName "pour" --input "{}" --tokens 9 --configDir . --config ./zbox_config.yaml --wallet ../ignore > build.log 2>&1
        done

        # Wait for 6 blobbers to register for 60 seconds...
        count=0
        while [[ $count -le 5 ]]
        do
          retry ./zwallet getblobbers --silent --configDir . --config ./zbox_config.yaml --wallet ../ignore | grep -o "[a-z0-9]\{64\}" > build.log
          num=$(cat build.log | wc -l)

          echo "Stake [$count] output:"
          cat build.log
          echo

          [[ $num -eq 6 ]] && break
          sleep 10
          ((count++))
        done
        if [[ $num -lt 6 ]]
        then
          echo "::error title=Number of blobbers registered is less than 6:: Only ${num}/6 blobbers are registered. Exiting run..."
          cat build.log
          exit 1
        fi
        readarray -t blobber_ids < build.log
        for id in "${blobber_ids[@]}"
        do
            retry ./zbox sp-lock --blobber_id $id --tokens 5 --configDir . --config ./zbox_config.yaml --wallet ../ignore > build.log 2>&1
        done
        ' > ./stake_blobbers.sh;
        chmod 777 ./stake_blobbers.sh;
        
    - name: "Register Authorizers"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        export HOME="/root"
        echo '{"client_id":"1746b06bb09f55ee01b33b5e2e055d6cc7a900cb57c0a3a5eaabb8a0e7745802","client_key":"7b630ba670dac2f22d43c2399b70eff378689a53ee03ea20957bb7e73df016200fea410ba5102558b0c39617e5afd2c1843b161a1dedec15e1ab40543a78a518","keys":[{"public_key":"7b630ba670dac2f22d43c2399b70eff378689a53ee03ea20957bb7e73df016200fea410ba5102558b0c39617e5afd2c1843b161a1dedec15e1ab40543a78a518","private_key":"c06b6f6945ba02d5a3be86b8779deca63bb636ce7e46804a479c50e53c864915"}],"mnemonics":"cactus panther essence ability copper fox wise actual need cousin boat uncover ride diamond group jacket anchor current float rely tragic omit child payment","version":"1.0","date_created":"2021-08-04 18:53:56.949069945 +0100 BST m=+0.018986002"}' > /root/.zcn/owner_wallet.json
        echo 'owner:
          Password: “\”02289b9\“”
          EthereumAddress: 0xD8c9156e782C68EE671C09b6b92de76C97948432
          EthereumNodeURL: https://goerli.infura.io/v3/773bfe30452f40f998e5d0f2f8a29888
          BridgeAddress: 0x2405e40161ea6da91AE0e95061e7A8462b4D5eEa
          WzcnAddress: 0x10140fbca3a468A1c35F132D75659eF0EB5d95DB
          AuthorizersAddress: 0xB132C20A02AD7C38d88805F0e3fFDdfb54224C58
          GasLimit: 300000
          Value: 0
          ConsensusThreshold: 75
        bridge:
          Password: “\”02289b9\“”
          EthereumAddress: 0xD8c9156e782C68EE671C09b6b92de76C97948432
          EthereumNodeURL: https://goerli.infura.io/v3/773bfe30452f40f998e5d0f2f8a29888
          AuthorizersAddress: 0xB132C20A02AD7C38d88805F0e3fFDdfb54224C58
          BridgeAddress: 0x2405e40161ea6da91AE0e95061e7A8462b4D5eEa
          WzcnAddress: 0x10140fbca3a468A1c35F132D75659eF0EB5d95DB
          GasLimit: 300000
          Value: 0
          ConsensusThreshold: 75' > /root/.zcn/bridge.yaml
        cat /root/.zcn/bridge.yaml
        echo 'authorizers_address: 0xB132C20A02AD7C38d88805F0e3fFDdfb54224C58
        block_worker: https://${{ env.NETWORK_URL }}/dns
        bridge_address: 0x2405e40161ea6da91AE0e95061e7A8462b4D5eEa
        confirmation_chain_length: 3
        ethereum_node_url: https://goerli.infura.io/v3/6141be73a15d47748af0dc14f53d57d7
        min_confirmation: 50
        min_submit: 50
        signature_scheme: bls0chain
        store_unlock_duration_sec: 2
        token_address: 0x10140fbca3a468A1c35F132D75659eF0EB5d95DB
        ' > /root/.zcn/config.yaml
        cat /root/.zcn/config.yaml
        echo '{"client_id":"1746b06bb09f55ee01b33b5e2e055d6cc7a900cb57c0a3a5eaabb8a0e7745802","client_key":"7b630ba670dac2f22d43c2399b70eff378689a53ee03ea20957bb7e73df016200fea410ba5102558b0c39617e5afd2c1843b161a1dedec15e1ab40543a78a518","keys":[{"public_key":"7b630ba670dac2f22d43c2399b70eff378689a53ee03ea20957bb7e73df016200fea410ba5102558b0c39617e5afd2c1843b161a1dedec15e1ab40543a78a518","private_key":"c06b6f6945ba02d5a3be86b8779deca63bb636ce7e46804a479c50e53c864915"}],"mnemonics":"cactus panther essence ability copper fox wise actual need cousin boat uncover ride diamond group jacket anchor current float rely tragic omit child payment","version":"1.0","date_created":"2021-08-04 18:53:56.949069945 +0100 BST m=+0.018986002"}' > /root/.zcn/wallet.json
        ./zwallet auth-register --url https://${{ env.NETWORK_URL }}/authorizer01/ --client_key b41d6232f11e0feefe895483688410216b3b1101e5db55044b22f0342fc18718b96b3124c9373dd116c50bd9b60512f28930a0e5771e58ecdc7d5bc2b570111a --client_id d6e9b3222434faa043c683d1a939d6a0fa2818c4d56e794974d64a32005330d3 --min_stake 1 --max_stake 10 --num_delegates 5 --service_charge 0.0
        # ./zwallet auth-sc-register --ethereum_address=0xD8c9156e782C68EE671C09b6b92de76C97948432
        ./zwallet auth-register --url https://${{ env.NETWORK_URL }}/authorizer02/ --client_key aa6b6a16ae362189008cd4e7b4573174460965ab8d9c18515f0142cee4d8ba0708584cfbb8074120586998157ccb808954cde6c68443f22aab0b5ca72175c79d --client_id 7b07c0489e2f35d7c13160f4da2866b4aa69aa4e8d2b2cd9c4fc002693dca5d7 --min_stake 1 --max_stake 10 --num_delegates 5 --service_charge 0.0
        # ./zwallet auth-sc-register --ethereum_address=0x557850520d8AcD3177B445CAaeD6410899Ef976a

    - name: "Wait for 0Chain network deployment to complete"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        timeout 300 ./stake_blobbers.sh
        if [[ $? -ne 0 ]]
        then
          cat build.log
          cd ..
          echo '#!/bin/bash
          RED="\033[0;31m"
          NC="\033[0m"
          echo
          echo -e "${RED}======================================================${NC}"
          echo -e "${RED}RETRYING DEPLOYMENT ($(echo $1 | awk '"'"'{ print toupper($0) }'"'"') ATTEMPT):${NC}"
          echo -e "${RED}======================================================${NC}"
          echo
          ./teardown.sh && ./deploy.sh && cd $GITHUB_WORKSPACE && ./stake_blobbers.sh $1;
          ' > ./retry.sh;
          chmod 777 ./retry.sh;
          timeout 300 ./retry.sh "second" || cd $GITHUB_WORKSPACE && cat build.log && cd .. && timeout 300 ./retry.sh "final" || cd $GITHUB_WORKSPACE && cat build.log && exit 1;
        else
          echo "Blobbers staked succefully on try $((ITER+1))."
          echo
          echo "==========================================================="
          echo "  0CHAIN DEPLOYMENT COMPLETED SUCCESSFULLY"
          echo "==========================================================="
        fi

    - name: "Extract Logging From Pods"
      if: ${{ failure() && env.NAMESPACE != '' }}
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo
        echo "======================================================"
        echo "Extracting Logging From Pods"
        echo "======================================================"
       

        echo '#!/bin/bash
        app=$1
        output=$2

        Green="\033[0;32m"
 
        podname=$(kubectl -n ${{ env.NAMESPACE }} --kubeconfig ../kube/${{ env.NAMESPACE }}-config get pods --no-headers -l app=$app -o custom-columns=:metadata.name)

        echo -ne "$Green [+] $app:$podname "
        kubectl -n ${{ env.NAMESPACE }} --kubeconfig ../kube/${{ env.NAMESPACE }}-config cp $podname:log $output && echo "OK"

        kubectl -n ${{ env.NAMESPACE }} --kubeconfig ../kube/${{ env.NAMESPACE }}-config get events --sort-by='.metadata.creationTimestamp' | grep $podname
        ' > ./logging.sh

        chmod 777 ./logging.sh;

        echo "-----------------------------"
        echo "> Show blobbers"
        echo "-----------------------------"
        ./zbox --configDir . --config ./zbox_config.yaml --wallet ../ignore ls-blobbers --all

        echo "-----------------------------"
        echo "> Show pods"
        echo "-----------------------------"
        kubectl -n ${{ env.NAMESPACE }} --kubeconfig ../kube/${{ env.NAMESPACE }}-config get pods

        echo "-----------------------------"
        echo "> Extract logs"
        echo "-----------------------------"

        ./logging.sh 0chain-sharder-01 ./logs/sharder-01
        ./logging.sh 0chain-sharder-02 ./logs/sharder-02
        echo 

        ./logging.sh 0chain-miner-01 ./logs/miner-01
        ./logging.sh 0chain-miner-02 ./logs/miner-02
        ./logging.sh 0chain-miner-03 ./logs/miner-03
        echo

        ./logging.sh blobber-blobber-01 ./logs/blobber-01
        ./logging.sh blobber-blobber-02 ./logs/blobber-02
        echo

        ./logging.sh blobber-validator-01 ./logs/validator-01
        ./logging.sh blobber-validator-02 ./logs/validator-02

    - name: "Archive Sharder Logging"
      if: ${{ failure() && env.NAMESPACE != '' }}
      uses: actions/upload-artifact@v3
      with:
        name: logging-pods-tests-sharder
        path: |
          ./logs/sharder-01
          ./logs/sharder-02
        retention-days: 5
    - name: "Archive Miner Logging"
      if: ${{ failure() && env.NAMESPACE != '' }}
      uses: actions/upload-artifact@v3
      with:
        name: logging-pods-tests-miner
        path: |
          ./logs/miner-01
          ./logs/miner-02
          ./logs/miner-03
        retention-days: 5

    - name: "Archive Blobber Logging"
      if: ${{ failure() && env.NAMESPACE != '' }}
      uses: actions/upload-artifact@v3
      with:
        name: logging-pods-tests-blobber
        path: |
          ./logs/blobber-01
          ./logs/blobber-02
        retention-days: 5

    - name: "Archive Validator Logging"
      if: ${{ failure() && env.NAMESPACE != '' }}
      uses: actions/upload-artifact@v3
      with:
        name: logging-pods-tests-validator
        path: |
          ./logs/validator-01
          ./logs/validator-02
        retention-days: 5

    - name: "Create post run teardown script"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        cd ..
        echo '#!/bin/bash

        if [ "$${{ env.TEARDOWN_CONDITION }}" == "true" ]; then
           echo
           echo "======================================================"
           echo "TEARING DOWN 0CHAIN NETWORK AFTER WORKFLOW RUN:"
           echo "======================================================"
           echo
           output=$(helm list -n ${{ env.NAMESPACE }} --kubeconfig "./kube/${{ env.NAMESPACE }}-config" | wc -l);
           if [ $output -gt 1 ]; then
              helm list --short -n ${{ env.NAMESPACE }} --kubeconfig "./kube/${{ env.NAMESPACE }}-config" | xargs -L1 helm delete -n ${{ env.NAMESPACE }} --kubeconfig "./kube/${{ env.NAMESPACE }}-config";
              sleep 30;
           fi
           kubectl delete pvc --all -n ${{ env.NAMESPACE }} --kubeconfig ./kube/${{ env.NAMESPACE }}-config;
           helm upgrade --install --wait --timeout 120s cleanup -n ${{ env.NAMESPACE }} 0chain-helm2/cleanDir --kubeconfig ./kube/${{ env.NAMESPACE }}-config;
        else
           echo "SKIPPING TEARDOWN AS CONDITION - [${{ env.TEARDOWN_CONDITION }}] WAS [$${{ env.TEARDOWN_CONDITION }}]"
        fi
        ' > ./post.sh;
        chmod 777 ./post.sh;

    - name: "POST WORKFLOW RUN: Destroy 0Chain Network"
      uses: webiny/action-post-run@2.0.1
      with:
        run: ./post.sh
        working-directory: ../
