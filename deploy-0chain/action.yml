name: "Deploy 0Chain Network"
description: "Deploy 0Chain Network to k8s cluster using helm"
inputs:
  kube_config:
    description: 'cluster details'
    required: true
  miner_image:
    description: 'miner DOCKER IMAGE to deploy'
    default: 'staging'
    required: false
  sharder_image:
    description: 'sharder DOCKER IMAGE to deploy'
    default: 'staging'
    required: false
  blobber_image:
    description: 'blobber DOCKER IMAGE to deploy'
    default: 'staging'
    required: false
  validator_image:
    description: 'validator DOCKER IMAGE to deploy'
    default: 'staging'
    required: false
  authorizer_image:
    description: 'authorizer DOCKER IMAGE to deploy'
    default: 'staging'
    required: false
  zbox_image:
    description: '0box DOCKER IMAGE to deploy'
    default: 'staging'
    required: false
  zblock_image:
    description: '0block DOCKER IMAGE to deploy'
    default: 'staging'
    required: false
  zdns_image:
    description: '0dns DOCKER IMAGE to deploy'
    default: 'staging'
    required: false
  explorer_image:
    description: 'Explorer DOCKER IMAGE to deploy'
    default: 'latest'
    required: false
  zproxy_image:
    description: '0Proxy DOCKER IMAGE to deploy'
    default: 'staging'
    required: false
  zsearch_image:
    description: '0Search DOCKER IMAGE to deploy'
    default: 'staging'
    required: false
  blobber_stake_image:
    description: 'Blobber stake DOCKER IMAGE to deploy'
    default: 'latest'
    required: false
  teardown_condition:
    description: 'Variable on which to teardown network'
    default: 'ALWAYS_TEARDOWN'
    required: false
  miner_fee:
    description: 'Miner fee per transaction'
    default: '0'
    required: false


runs:
  using: "composite"
  steps:
    - name: "Setup Config"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo "NETWORK_URL=$(echo dev-${RUNNER_NAME:(-1)}.devnet-0chain.net)" >> $GITHUB_ENV
        echo "MINER_TAG=$(echo '${{inputs.miner_image}}')" >> $GITHUB_ENV
        echo "SHARDER_TAG=$(echo '${{inputs.sharder_image}}')" >> $GITHUB_ENV
        echo "BLOBBER_TAG=$(echo '${{inputs.blobber_image}}')" >> $GITHUB_ENV
        echo "VALIDATOR_TAG=$(echo '${{inputs.validator_image}}')" >> $GITHUB_ENV
        echo "AUTHORIZER_TAG=$(echo '${{inputs.authorizer_image}}')" >> $GITHUB_ENV
        echo "ZBOX_TAG=$(echo '${{inputs.zbox_image}}')" >> $GITHUB_ENV
        echo "ZDNS_TAG=$(echo '${{inputs.zdns_image}}')" >> $GITHUB_ENV
        echo "ZBLOCK_TAG=$(echo '${{inputs.zblock_image}}')" >> $GITHUB_ENV
        echo "EXPLORER_TAG=$(echo '${{inputs.explorer_image}}')" >> $GITHUB_ENV
        echo "BLOBBER_STAKE_TAG=$(echo '${{inputs.blobber_stake_image}}')" >> $GITHUB_ENV
        echo "ZPROXY_TAG=$(echo '${{inputs.zproxy_image}}')" >> $GITHUB_ENV
        echo "ZSEARCH_TAG=$(echo '${{inputs.zsearch_image}}')" >> $GITHUB_ENV
        ALWAYS_TEARDOWN=true
        echo "TEARDOWN_CONDITION=${{inputs.teardown_condition}}" >> $GITHUB_ENV
        echo "MINER_FEE=${{inputs.miner_fee}}" >> $GITHUB_ENV

        echo "RUNNER_NUMBER=${RUNNER_NAME:(-1)}" >> $GITHUB_ENV
        echo "NAMESPACE=dev-${RUNNER_NAME:(-1)}" >> $GITHUB_ENV

    - name: "VIEW DEPLOY CONFIGURATION"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo
        echo "=================================================="
        echo "DEPLOYING 0CHAIN WITH THE FOLLOWING CONFIGURATION:"
        echo "=================================================="
        echo
        echo "0Chain network URL:      [${{ env.NETWORK_URL }}]"
        echo "Miner docker image:      [${{ env.MINER_TAG }}]"
        echo "Sharder docker image:    [${{ env.SHARDER_TAG }}]"
        echo "Blobber docker image:    [${{ env.BLOBBER_TAG }}]"
        echo "Validator docker image:  [${{ env.VALIDATOR_TAG }}]"
        echo "Authorizer docker image: [${{ env.AUTHORIZER_TAG }}]"
        echo "0box docker image:       [${{ env.ZBOX_TAG }}]"
        echo "0dns docker image:       [${{ env.ZDNS_TAG }}]"
        echo "0block docker image:     [${{ env.ZBLOCK_TAG }}]"
        echo "0Proxy docker image:     [${{ env.ZPROXY_TAG }}]"
        echo "0Search docker image:    [${{ env.ZSEARCH_TAG }}]"
        echo "Explorer docker image:   [${{ env.EXPLORER_TAG }}]"
        echo "Stake docker image:      [${{ env.BLOBBER_STAKE_TAG }}]"

    - name: "Install helm"
      uses: azure/setup-helm@v1
      with:
        version: 'v3.2.2'

    - name: "Install kubectl"
      uses: azure/setup-kubectl@v1
      id: install

    - name: "Configure helm & kubectl"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        echo
        echo "=================================================="
        echo "CONFIGURING HELM"
        echo "=================================================="
        echo
        cd ..
        helm repo remove 0chain-helm
        helm repo add 0chain-helm http://0chain-helm-chart.s3-website.us-east-2.amazonaws.com/dev/
        helm repo update
        mkdir -p ./kube
        echo "${{ inputs.kube_config }}" | xargs | base64 -d > ./kube/${{ env.NAMESPACE }}-config

    - name: "Remove existing 0Chain network and data"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        cd ..
        echo '#!/bin/bash
        echo
        echo "=================================================="
        echo "REMOVING EXISTING 0CHAIN NETWORK"
        echo "=================================================="
        echo

        output=$(helm list -n ${{ env.NAMESPACE }} --kubeconfig "./kube/${{ env.NAMESPACE }}-config" -a | wc -l);
        if [ $output -gt 1 ]; then
            helm list --short -n ${{ env.NAMESPACE }} --kubeconfig "./kube/${{ env.NAMESPACE }}-config" -a | xargs -L1 helm delete -n ${{ env.NAMESPACE }} --kubeconfig "./kube/${{ env.NAMESPACE }}-config"
            sleep 30
        fi
            helm upgrade --install --wait --timeout 120s cleanup -n ${{ env.NAMESPACE }} 0chain-helm/cleanDir --kubeconfig ./kube/${{ env.NAMESPACE }}-config
            kubectl wait --for=condition=complete --timeout 900s job/helm-clean-directory -n ${{ env.NAMESPACE }} --kubeconfig ./kube/${{ env.NAMESPACE }}-config
            kubectl delete all --all -n ${{ env.NAMESPACE }} --kubeconfig ./kube/${{ env.NAMESPACE }}-config
        ' > ./teardown.sh;
        chmod 777 ./teardown.sh;
        ./teardown.sh

    - name: "Deploy 0Chain network"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        cd ..
        echo '#!/bin/bash
        echo
        echo "=================================================="
        echo "DEPLOYING 0CHAIN NETWORK"
        echo "=================================================="
        echo

        helm upgrade --install 0chain --wait --timeout 10m --set sharder.hostName=${{ env.NAMESPACE }} --set sharder.host=devnet-0chain.net --set sharder.image.tag=${{ env.SHARDER_TAG }} --set miner.hostName=${{ env.NAMESPACE }} --set miner.host=devnet-0chain.net --set miner.image.tag=${{ env.MINER_TAG }} --set sharder.config.zchain.server_chain.transaction.min_fee=${{ env.MINER_FEE }} -n ${{ env.NAMESPACE }} 0chain-helm/zchain --kubeconfig ./kube/${{ env.NAMESPACE }}-config
        helm upgrade --install 0dns --wait --timeout 60s --set zdns.image.tag=${{ env.ZDNS_TAG }} --set zdns.hostName=${{ env.NAMESPACE }} --set zdns.host=devnet-0chain.net -n ${{ env.NAMESPACE }}  0chain-helm/zdns --kubeconfig ./kube/${{ env.NAMESPACE }}-config
        helm upgrade --install blobber --wait --set blobber.config.block_worker=https://${{ env.NAMESPACE }}.devnet-0chain.net/dns --set validator.config.block_worker=https://${{ env.NAMESPACE }}.devnet-0chain.net/dns --set blobber.config.delegate_wallet=591d6d0d5642bdbc924756ca2647b4b59adce0acd02a487ecc4d1bd4669293a8 --set validator.config.delegate_wallet=591d6d0d5642bdbc924756ca2647b4b59adce0acd02a487ecc4d1bd4669293a8 --set blobber.hostName=${{ env.NAMESPACE }} --set blobber.host=devnet-0chain.net --set blobber.image.tag=${{ env.BLOBBER_TAG }} --set validator.image.tag=${{ env.VALIDATOR_TAG }} --set validator.hostName=${{ env.NAMESPACE }} --set validator.host=devnet-0chain.net -n ${{ env.NAMESPACE }}  0chain-helm/blobber --kubeconfig ./kube/${{ env.NAMESPACE }}-config
        helm upgrade --install 0block --set zblock.hostName=${{ env.NAMESPACE }} --set zblock.host=devnet-0chain.net --set zblock.image.tag=${{ env.ZBLOCK_TAG }} -n ${{ env.NAMESPACE }}  0chain-helm/zblock --kubeconfig ./kube/${{ env.NAMESPACE }}-config
        helm upgrade --install explorer --set explorer.config.blockWorker=https://${{ env.NAMESPACE }}.devnet-0chain.net/dns --set explorer.hostName=${{ env.NAMESPACE }} --set explorer.image.tag=${{ env.EXPLORER_TAG }} --set explorer.host=devnet-0chain.net -n ${{ env.NAMESPACE }}  0chain-helm/explorer --kubeconfig ./kube/${{ env.NAMESPACE }}-config
        helm upgrade --install 0proxy --set zproxy.hostName=${{ env.NAMESPACE }} --set zproxy.host=devnet-0chain.net --set zproxy.config.blockWorker=https://${{ env.NAMESPACE }}.devnet-0chain.net/dns --set zproxy.image.tag=${{ env.ZPROXY_TAG }} -n ${{ env.NAMESPACE }}  0chain-helm/zproxy --kubeconfig ./kube/${{ env.NAMESPACE }}-config
        helm upgrade --install 0box --wait --set zbox.hostName=${{ env.NAMESPACE }} --set zbox.host=devnet-0chain.net --set zbox.config.blockWorker=https://${{ env.NAMESPACE }}.devnet-0chain.net/dns --set zbox.image.tag=${{ env.ZBOX_TAG }} -n ${{ env.NAMESPACE }}  0chain-helm/zbox --kubeconfig ./kube/${{ env.NAMESPACE }}-config
        helm upgrade --install 0search --set zsearch.hostName=${{ env.NAMESPACE }} --set zsearch.host=devnet-0chain.net --set zsearch.image.tag=${{ env.ZSEARCH_TAG }} -n ${{ env.NAMESPACE }}  0chain-helm/zsearch --kubeconfig ./kube/${{ env.NAMESPACE }}-config
        helm upgrade --install blobber-stake --wait -n ${{ env.NAMESPACE }} --set blobberStake.config.blockWorker=https://${{ env.NAMESPACE }}.devnet-0chain.net/dns --set blobberStake.blobberCount=6 --set blobberStake.hostName=${{ env.NAMESPACE }} --set blobberStake.host=devnet-0chain.net --set blobberStake.image.tag=${{ env.BLOBBER_STAKE_TAG }} 0chain-helm/blobberStake --kubeconfig ./kube/${{ env.NAMESPACE }}-config
        helm upgrade --install authorizer -n ${{ env.NAMESPACE }} --set authorizer.authorizerCount=3 --set authorizer.hostName=${{ env.NAMESPACE }} --set authorizer.host=devnet-0chain.net --set authorizer.image.tag=${{ env.AUTHORIZER_TAG }} --set authorizer.config.blockWorker=https://${{ env.NAMESPACE }}.devnet-0chain.net/dns 0chain-helm/authorizer --kubeconfig ./kube/${{ env.NAMESPACE }}-config
        ' > ./deploy.sh;
        chmod 777 ./deploy.sh;
        ./deploy.sh

    - name: "Wait for 0Chain network deployment to complete"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        cd ..
        echo '#!/bin/bash

        RETRY_ATTEMPT=$1
        ANNOTATION_LEVEL="warning"
        if [ "$1" == "final" ]; then
            ANNOTATION_LEVEL="error"
        fi

        echo "Waiting for 0Chain deployment to finish..."
        sleep 70
        counter=0;
        while [ $counter -lt 30 ] && kubectl -n ${{ env.NAMESPACE }} get pods --kubeconfig ./kube/${{ env.NAMESPACE }}-config | grep blobber-stake | grep -vi Completed; do

          if ( kubectl -n ${{ env.NAMESPACE }} get pods --kubeconfig ./kube/${{ env.NAMESPACE }}-config | grep blobber-stake | grep -i Error ); then
            echo "::$ANNOTATION_LEVEL title=0Chain network deployment failed on $RETRY_ATTEMPT attempt::blobber stake failed on $RETRY_ATTEMPT attempt"
            exit 1
          fi

          sleep 10
          echo "Still waiting for 0Chain deployment to finish..." && ((counter=counter+1));
        done

        if [ $counter -eq 30 ]; then
          echo "::$ANNOTATION_LEVEL title=0Chain network deployment failed on $RETRY_ATTEMPT attempt::Chain setup did not complete within the time limit on $RETRY_ATTEMPT attempt"
          exit 1
        fi

        echo "::notice title=0Chain network deployment was successful on $RETRY_ATTEMPT attempt::0Chain was successfully deployed to [${{ env.NETWORK_URL }}]"
        ' > ./wait.sh;
        chmod 777 ./wait.sh;
        ./wait.sh "first" || {
          echo '#!/bin/bash
          RED="\033[0;31m"
          NC="\033[0m"
          echo
          echo -e "${RED}======================================================${NC}"
          echo -e "${RED}RETRYING DEPLOYMENT ($(echo $1 | awk '"'"'{ print toupper($0) }'"'"') ATTEMPT):${NC}"
          echo -e "${RED}======================================================${NC}"
          echo
          ./teardown.sh && ./deploy.sh && ./wait.sh $1;
          ' > ./retry.sh;
          chmod 777 ./retry.sh;
          ./retry.sh "second" || ./retry.sh "final"
        }

    - name: "Create post run teardown script"
      shell: 'script --return --quiet --command "bash {0}"'
      run: |
        cd ..
        echo '#!/bin/bash

        if [ "$${{ env.TEARDOWN_CONDITION }}" == "true" ]; then
           echo
           echo "======================================================"
           echo "TEARING DOWN 0CHAIN NETWORK AFTER WORKFLOW RUN:"
           echo "======================================================"
           echo
           output=$(helm list -n ${{ env.NAMESPACE }} --kubeconfig "./kube/${{ env.NAMESPACE }}-config" | wc -l);
           if [ $output -gt 1 ]; then
              helm list --short -n ${{ env.NAMESPACE }} --kubeconfig "./kube/${{ env.NAMESPACE }}-config" | xargs -L1 helm delete -n ${{ env.NAMESPACE }} --kubeconfig "./kube/${{ env.NAMESPACE }}-config";
              sleep 30;
           fi
           kubectl delete pvc --all -n ${{ env.NAMESPACE }} --kubeconfig ./kube/${{ env.NAMESPACE }}-config;
           helm upgrade --install --wait --timeout 120s cleanup -n ${{ env.NAMESPACE }} 0chain-helm2/cleanDir --kubeconfig ./kube/${{ env.NAMESPACE }}-config;
        else
           echo "SKIPPING TEARDOWN AS CONDITION - [${{ env.TEARDOWN_CONDITION }}] WAS [$${{ env.TEARDOWN_CONDITION }}]"
        fi
        ' > ./post.sh;
        chmod 777 ./post.sh;

    - name: "POST WORKFLOW RUN: Destroy 0Chain Network"
      uses: webiny/action-post-run@2.0.1
      with:
        run: ./post.sh
        working-directory: ../
